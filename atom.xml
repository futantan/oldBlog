<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Prayer&#39;s blog</title>
  
  <subtitle>爱这个世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.futantan.com/"/>
  <updated>2017-10-27T09:49:38.000Z</updated>
  <id>http://www.futantan.com/</id>
  
  <author>
    <name>Prayer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UIKit 中协议与值类型编程实战</title>
    <link href="http://www.futantan.com/2016/06/18/wwdc-2016-session-419/"/>
    <id>http://www.futantan.com/2016/06/18/wwdc-2016-session-419/</id>
    <published>2016-06-18T08:06:01.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文为 <a href="https://developer.apple.com/videos/play/wwdc2016/419/" target="_blank" rel="external">WWDC 2016 Session 419</a> 的部分内容笔记。强烈推荐观看。</p><a id="more"></a><h2 id="设计师来需求了"><a href="#设计师来需求了" class="headerlink" title="设计师来需求了"></a>设计师来需求了</h2><p>在我们的 App 中，通常需要自定义一些视图。例如下图：</p><p><img src="/media/14662537887434.jpg" alt=""></p><p>我们可能会在很多地方用到右边为内容，左边有个装饰视图到样式，为了代码的通用性，我们在 <code>UITableViewCell</code> 的基础上，封装了一层 <code>DecoratingLayout</code>，然后再让子类继承它，从而实现这一类视图。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratingLayout</span> : <span class="title">UITableViewCell</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> content: <span class="type">UIView</span></div><div class="line">    <span class="keyword">var</span> decoration: <span class="type">UIView</span></div><div class="line">    </div><div class="line">    <span class="comment">// Perform layout...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>但是代码这样组织的话，因为继承自 <code>UITableViewCell</code>，所以对于其他类型的 view 就不能使用了。我们开始重构。</p><p><img src="/media/14662540724528.jpg" alt=""></p><p>我们需要让视图布局的功能独立与具体的 view 类型，无论是 <code>UITableViewCell</code>、<code>UIView</code>、还是 <code>SKNode</code>（Sprite Kit 中的类型）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DecoratingLayout</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> content: <span class="type">UIView</span></div><div class="line">    <span class="keyword">var</span> decoration: <span class="type">UIView</span></div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> &#123;</div><div class="line">        <span class="comment">// Perform layout...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里，我们使用结构体 <code>DecoratingLayout</code> 来表示这种 layout。相比于之前的方式，现在只要在具体的实现中，创建一个 <code>DecoratingLayout</code> 就可以实现布局的功能。代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DreamCell</span> : <span class="title">UITableViewCell</span> </span>&#123;   ...</div><div class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;<span class="keyword">var</span> decoratingLayout = <span class="type">DecoratingLayout</span>(content: content, decoration: decoration)decoratingLayout.layout(<span class="keyword">in</span>: bounds)&#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DreamDetailView</span> : <span class="title">UIView</span> </span>&#123;   ...</div><div class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutSubviews</span><span class="params">()</span></span> &#123;<span class="keyword">var</span> decoratingLayout = <span class="type">DecoratingLayout</span>(content: content, decoration: decoration)decoratingLayout.layout(<span class="keyword">in</span>: bounds)</div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意观察上面的代码，在 <code>UITableViewCell</code> 和 <code>UIView</code> 类型的 view 中，布局功能和具体的视图已经解耦，我们都可以使用 strut 的代码来完成布局功能。</p><p>通过这种方式实现的布局，对于测试来说也更加的方便：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">testLayout</span><span class="params">()</span></span> &#123;<span class="keyword">let</span> child1 = <span class="type">UIView</span>()<span class="keyword">let</span> child2 = <span class="type">UIView</span>()<span class="keyword">var</span> layout = <span class="type">DecoratingLayout</span>(content: child1, decoration: child2)layout.layout(<span class="keyword">in</span>: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">120</span>, height: <span class="number">40</span>))</div><div class="line"></div><div class="line"><span class="type">XCTAssertEqual</span>(child1.frame, <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">5</span>, width: <span class="number">35</span>, height: <span class="number">30</span>))<span class="type">XCTAssertEqual</span>(child2.frame, <span class="type">CGRect</span>(x: <span class="number">35</span>, y: <span class="number">5</span>, width: <span class="number">70</span>, height: <span class="number">30</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们的野心远不止于此。这里我们也想要在 <code>SKNode</code> 上使用上面的布局方式。看如下的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ViewDecoratingLayout</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> content: <span class="type">UIView</span></div><div class="line">    <span class="keyword">var</span> decoration: <span class="type">UIView</span></div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> &#123;</div><div class="line">    content.frame = ...      decoration.frame = ...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NodeDecoratingLayout</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> content: <span class="type">SKNode</span></div><div class="line">    <span class="keyword">var</span> decoration: <span class="type">SKNode</span></div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> &#123;</div><div class="line">        content.frame = ...       decoration.frame = ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意观察上面的代码，除了 <code>content</code> 和 <code>decoration</code> 的类型不一样之外，其他的都是重复的代码，<strong>重复就是罪恶！</strong></p><p>那么我们如何才能消除这些重复代码呢？在 <code>DecoratingLayout</code> 中，唯一用到 <code>content</code> 和 <code>decoration</code> 的地方，是获取它的 <code>frame</code> 属性，所以，如果这两个 property 的类型信息中，能够提供 frame 就可以了，于是我们想到了使用 protocol 作为类型（type）来使用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Layout</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> frame: <span class="type">CGRect</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>于是上面两个重复的代码片段又可以合并为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DecoratingLayout</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> content: <span class="type">Layout</span></div><div class="line">    <span class="keyword">var</span> decoration: <span class="type">Layout</span></div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> &#123;</div><div class="line">    content.frame = ...      decoration.frame = ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为了能够在使用 <code>DecoratingLayout</code> 的时候传入 <code>UIView</code> 和 <code>SKNode</code>，我们需要让它们遵守 <code>Layout</code> 协议，只需要像下面这样声明一下就可以了，因为二者都已满足协议的要求。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span>: <span class="title">Layout</span> </span>&#123;&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SKNode</span>: <span class="title">Layout</span> </span>&#123;&#125;</div></pre></td></tr></table></figure><blockquote><p>这里讲一点我自己的理解，DreamCell 和 DreamDetailView 中能够使用同一套布局代码，是因为传递进去的 view 都拥有公共的父类 UIView，它提供了 frame 信息，而 UIView 和 SKNode 则不行，这里我们使用 protocol 作为类型参数，可以很好的解决这一问题。</p></blockquote><h2 id="引入范型"><a href="#引入范型" class="headerlink" title="引入范型"></a>引入范型</h2><p>然而，目前的代码中是存在一个问题的，<code>content</code> 和 <code>decoration</code> 的具体类型信息在实际中可能是不一致的，因为这里我们只要求了它们的类型信息中提供 <code>frame</code> 属性，而并没有规定它们是相同的类型，例如 <code>content</code> 可能是 <code>UIView</code> 而 <code>decoration</code> 是 <code>SKNode</code> 类型，这与我们的期望是不符的。</p><p>这里我们可以通过引入范型来解决：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DecoratingLayout</span>&lt;<span class="title">Child</span>: <span class="title">Layout</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">var</span> content: <span class="type">Child</span></div><div class="line">    <span class="keyword">var</span> decoration: <span class="type">Child</span></div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> &#123;</div><div class="line">    content.frame = ...      decoration.frame = ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过使用范型，我们就保证了 <code>content</code> 和 <code>decoration</code> 类型相同。</p><h2 id="需求又来啦"><a href="#需求又来啦" class="headerlink" title="需求又来啦"></a>需求又来啦</h2><p>设计师说，来，小伙子，完成下面的布局。<br><img src="/media/14662493219132.jpg" alt=""></p><p>为了实现上图的效果，我们仿照之前的写法，实现如下代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CascadingLayout</span>&lt;<span class="title">Child</span>: <span class="title">Layout</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">var</span> children: [<span class="type">Child</span>]</div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="/media/14662496073675.jpg" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DecoratingLayout</span>&lt;<span class="title">Child</span>: <span class="title">Layout</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">var</span> content: <span class="type">Child</span></div><div class="line">    <span class="keyword">var</span> decoration: <span class="type">Child</span></div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> &#123;</div><div class="line">    content.frame = ...      decoration.frame = ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里我又将前面的代码拿了过来，方便查看。</p><p>我们将上面的两种布局方式组合起来，就可以得到下面的效果：<br><img src="/media/14662496417592.jpg" alt=""></p><h2 id="组合优于继承"><a href="#组合优于继承" class="headerlink" title="组合优于继承"></a>组合优于继承</h2><p>那么如何才能将两种布局方式组合起来呢？</p><p>来观察我们之前定义的协议 <code>Layout</code>，其实我们关心的并不是 <code>Layout</code> 中的 <code>frame</code>，我们的目的是，让 <code>Layout</code> 能够在特定的上下文中进行相应的布局，所以我们来修改代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Layout</span> </span>&#123;    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span>&#125;</div></pre></td></tr></table></figure><p>这里 <code>Layout</code> 的语义变成了：该类型能够在特定的 <code>CGRect</code> 中进行相应的布局。</p><p>同时我们也需要修改代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span>: <span class="title">Layout</span> </span>&#123; ... &#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SKNode</span>: <span class="title">Layout</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure><p>这里省略了使用 <code>UIView</code> 和 <code>SKNode</code> 的 frame 来进行布局的代码。<br>于是我们的代码变成了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DecoratingLayout</span>&lt;<span class="title">Child</span> : <span class="title">Layout</span>&gt; : <span class="title">Layout</span> </span>&#123; ... &#125;<span class="class"><span class="keyword">struct</span> <span class="title">CascadingLayout</span>&lt;<span class="title">Child</span> : <span class="title">Layout</span>&gt; : <span class="title">Layout</span> </span>&#123; ... &#125;</div></pre></td></tr></table></figure><p>看到这里可能有点晕，其实代码表达的意思是，<code>DecoratingLayout</code> 遵循 <code>Layout</code> 协议，而它的 <code>content</code> 和 <code>decoration</code> 两个 property 也同样遵循该协议，即可以在特定的 <code>CGRect</code> 中完成布局操作。而两个结构体本身就包含 <code>layout</code> 操作，所以不需要任何其他的代码，结构体做的事情就是，在自己进行 <code>layout</code> 操作的基础上，将其传递给两个 property 然后分别进行 <code>layout</code>，这就完成了<strong>组合</strong>。</p><p>组合之后的执行代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> decoration = <span class="type">CascadingLayout</span>(children: accessories) <span class="comment">// 左边</span><span class="keyword">var</span> composedLayout = <span class="type">DecoratingLayout</span>(content: content, decoration: decoration) <span class="comment">// 整体</span>composedLayout.layout(<span class="keyword">in</span>: rect) <span class="comment">// 执行 layout 操作</span></div></pre></td></tr></table></figure><h2 id="On-step-further"><a href="#On-step-further" class="headerlink" title="On step further"></a>On step further</h2><p><img src="/media/14662493219132.jpg" alt=""></p><p>注意观察上面的视图，视图是有层次结构的，所以我们需要在布局的时候，能够拿到这个子视图数组，之前的视实现方式中，只能布局单个的视图，没有办法拿到整个视图数组进行操作。<br>我们来修改 <code>Layout</code> 的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Layout</span> </span>&#123;    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span>    <span class="keyword">var</span> contents: [<span class="type">Layout</span>] &#123; <span class="keyword">get</span> &#125;&#125;</div></pre></td></tr></table></figure><p>这里增加了一个可读属性，返回一个 <code>Layout</code> 数组。同样，这里的代码存在一个问题，contents 可以为不同的 Layout 类型，例如 <code>[UIView(), SKNode()]</code>，所以为了让 <code>contents</code> 中的类型一直，我们使用 <code>associatedtype</code>，将上面的代码改写为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Layout</span> </span>&#123;    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span></div><div class="line">    associatedtype <span class="type">Content</span>    <span class="keyword">var</span> contents: [<span class="type">Content</span>] &#123; <span class="keyword">get</span> &#125;&#125;</div></pre></td></tr></table></figure><p>相应的 struct 改为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ViewDecoratingLayout</span> : <span class="title">Layout</span> </span>&#123;   ...   <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span>   <span class="keyword">typealias</span> <span class="type">Content</span> = <span class="type">UIView</span>   <span class="keyword">var</span> contents: [<span class="type">Content</span>] &#123; <span class="keyword">get</span> &#125;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NodeDecoratingLayout</span> : <span class="title">Layout</span> </span>&#123;   ...   <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span>   <span class="keyword">typealias</span> <span class="type">Content</span> = <span class="type">SKNode</span>   <span class="keyword">var</span> contents: [<span class="type">Content</span>] &#123; <span class="keyword">get</span> &#125;&#125;</div></pre></td></tr></table></figure><p>重复就是罪恶啊！可以看到，这里唯一的不同只是 <code>Content</code> 的类型信息。这里我们还是利用强大的范型来解决：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DecoratingLayout</span>&lt;<span class="title">Child</span> : <span class="title">Layout</span>&gt; : <span class="title">Layout</span> </span>&#123;   ...   <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span>   <span class="keyword">typealias</span> <span class="type">Content</span> = <span class="type">Child</span>.<span class="type">Content</span>   <span class="keyword">var</span> contents: [<span class="type">Content</span>] &#123; <span class="keyword">get</span> &#125;&#125;</div></pre></td></tr></table></figure><p>这里，当 <code>Child</code> 范型确定的时候，<code>Child.Content</code> 的类型信息也相应地确定了，所以可以使用上面的代码来消除重复。</p><p>范型牛逼！*3</p><p>别激动的太早，我们的代码中还存在一个问题。目前我们的代码长这样：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DecoratingLayout</span>&lt;<span class="title">Child</span> : <span class="title">Layout</span>&gt; : <span class="title">Layout</span> </span>&#123;    <span class="keyword">var</span> content: <span class="type">Child</span>    <span class="keyword">var</span> decoration: <span class="type">Child</span>    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span>    <span class="keyword">typealias</span> <span class="type">Content</span> = <span class="type">Child</span>.<span class="type">Content</span>    <span class="keyword">var</span> contents: [<span class="type">Content</span>] &#123; <span class="keyword">get</span> &#125;&#125;</div></pre></td></tr></table></figure><p>这里的 <code>content</code> 和 <code>decoration</code> 使用的是同样的 layout 方式，这与我们的预期是不符的。我们的需求时视图左边和右边使用不同的布局方式。然而我们又需要这个范型的方式来保证它们俩实际的数据类型是相同的，这里需要使用两个范型信息，但是限制它们的实际数据类型相同。修改后的代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DecoratingLayout</span>&lt;<span class="title">Child</span> : <span class="title">Layout</span>, <span class="title">Decoration</span> : <span class="title">Layout</span></span></div><div class="line"><span class="class"><span class="title">where</span> <span class="title">Child</span>.<span class="title">Content</span> == <span class="title">Decoration</span>.<span class="title">Content</span>&gt; : <span class="title">Layout</span> </span>&#123;    <span class="keyword">var</span> content: <span class="type">Child</span>    <span class="keyword">var</span> decoration: <span class="type">Decoration</span>    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">layout</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span>    <span class="keyword">typealias</span> <span class="type">Content</span> = <span class="type">Child</span>.<span class="type">Content</span>    <span class="keyword">var</span> contents: [<span class="type">Content</span>] &#123; <span class="keyword">get</span> &#125;&#125;</div></pre></td></tr></table></figure><p>以上。</p><p>再一次，推荐你在写 Swift 中定义新类型的时候，把 class 抛在脑后，尝试着从 struct 和 protocol 开始。</p><p>Happy Hacking!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为 &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/419/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WWDC 2016 Session 419&lt;/a&gt; 的部分内容笔记。强烈推荐观看。&lt;/p&gt;
    
    </summary>
    
      <category term="WWDC" scheme="http://www.futantan.com/categories/WWDC/"/>
    
    
      <category term="iOS" scheme="http://www.futantan.com/tags/iOS/"/>
    
      <category term="WWDC" scheme="http://www.futantan.com/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>Learn RxSwift The Hard Way - Geolocation (三)</title>
    <link href="http://www.futantan.com/2016/06/03/Learn-RxSwift-The-Hard-Way-Geolocation/"/>
    <id>http://www.futantan.com/2016/06/03/Learn-RxSwift-The-Hard-Way-Geolocation/</id>
    <published>2016-06-03T01:25:13.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们来从头实现 RxExample 的第三个例子：GeolocationExample。如果不知道如何开始，可以参考之前的几篇博文。</p><a id="more"></a><p>你可以先运行一下代码，看一下效果。每当我们改变对应用程序定位的授权，界面都会发生相应的改变。</p><h2 id="GeolocationService"><a href="#GeolocationService" class="headerlink" title="GeolocationService"></a>GeolocationService</h2><p>首先我们来看提供定位功能的类：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeolocationService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> (<span class="keyword">set</span>) <span class="keyword">var</span> autorized: <span class="type">Driver</span>&lt;<span class="type">Bool</span>&gt;</div><div class="line">    <span class="keyword">private</span> (<span class="keyword">set</span>) <span class="keyword">var</span> location: <span class="type">Driver</span>&lt;<span class="type">CLLocationCoordinate2D</span>&gt;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> instance = <span class="type">GeolocationService</span>()</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> locationManager = <span class="type">CLLocationManager</span>()</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123;...&#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里我省略了 <code>init</code> 的内容，先来看接口，之后我们会回过头来看具体的实现。很显然，这里的 <code>GeolocationService</code> 是一个标准的单例。而前两个对于外部只读的变量，就是这个 Service 对外提供的接口。</p><p>不难猜测，这里的 <code>autorized</code> 表示是否有定位权限。目前知道这些就够了，先了解骨架，后面再深入细节。</p><h2 id="GeolocationViewController"><a href="#GeolocationViewController" class="headerlink" title="GeolocationViewController"></a>GeolocationViewController</h2><p>我们来看 <code>GeolocationViewController</code> 的核心代码。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TAG: 终极版本</span></div><div class="line">geolocationService</div><div class="line">.autorized</div><div class="line">.drive(noGeolocationView.rx_driveAuthorization)</div><div class="line">.addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><p>噫…这里的 <code>drive</code> 是什么，<code>rx_driveAuthorization</code> 又是什么？我们先来看 <code>rx_driveAuthorization</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">private extension UIView &#123;</div><div class="line">    var rx_driveAuthorization: AnyObserver&lt;Bool&gt; &#123;</div><div class="line">        return UIBindingObserver(UIElement: self) &#123; view, authorized in</div><div class="line">            if authorized &#123;</div><div class="line">                view.hidden = true</div><div class="line">                view.superview?.sendSubviewToBack(view)</div><div class="line">            &#125;</div><div class="line">            else &#123;</div><div class="line">                view.hidden = false</div><div class="line">                view.superview?.bringSubviewToFront(view)</div><div class="line">            &#125;</div><div class="line">        &#125;.asObserver()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>Tip：这里将 extension 声明为 private，可以将其限制在该代码文件中，类似的效果可以参考 <a href="http://swift.gg/2016/06/02/swift-selector-syntax-sugar/" target="_blank" rel="external">Swift：Selector 语法糖</a></p></blockquote><p><code>rx_driveAuthorization</code> 为一个计算属性，类型为 <code>AnyObserver&lt;Bool&gt;</code>。虽然目前不知道 <code>UIBindingObserver</code> 是干什么用的，不过从代码可以推测出来，通过一个 <code>authorized</code> 布尔类型的变量来控制视图的状态。</p><p>来看 <code>UIBindingObserver</code> 的构造函数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">init</span>(<span class="type">UIElement</span>: <span class="type">UIElementType</span>, binding: (<span class="type">UIElementType</span>, <span class="type">Value</span>) -&gt; <span class="type">Void</span>)</div></pre></td></tr></table></figure><p><code>UIElement</code> 为 UI 元素，后面为一个函数，从 <code>binding</code> 这个函数名也可以看出，当订阅的事件发生的时候，会调用这个函数。其中第二个参数 <code>Value</code> 就是这个 observer 的订阅消息类型。</p><p>理解到这里，总结一下。<code>rx_driveAuthorization</code> 为一个订阅者（observer），订阅的消息类型是 bool，然后根据这个值来作出视图的相应变化。</p><p>我们先不管上面的 <code>drive</code>，如果按照我们之前的做法，如何来实现这个功能呢？虽然不推荐，但是我们可以写出下面容易理解的代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TAG: 版本1</span></div><div class="line">geolocationService.autorized</div><div class="line">    .asObservable()</div><div class="line">    .subscribeNext &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (autorized) <span class="keyword">in</span></div><div class="line">        <span class="keyword">self</span>?.noGeolocationView.rx_driveAuthorization.onNext(autorized)</div><div class="line">    &#125;</div><div class="line">    .addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><blockquote><p>Tip: 这里如果不用 weak self，会造成循环引用哦。</p></blockquote><p>上面的方式应该是最容易理解的。首先将 <code>autorized</code> 转为 Observable，然后订阅 next 事件，然后显式地发送 onNext 事件。虽然这种方式可行，但是有些不妥的。我们来一步一步优化。</p><p>改写成如下代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// TAG: 版本2</span></div><div class="line">geolocationService.autorized</div><div class="line">    .asObservable()</div><div class="line">    .subscribe(noGeolocationView.rx_driveAuthorization)</div></pre></td></tr></table></figure><p>这里直接用 <code>subscribe</code> 的方式来订阅。其实如果进入源码看的话，和上面我们实现的方式差不多，不过除了 next 事件，还有 complete 等事件的处理。</p><p>好了，现在版本 2 和我们的终极版本已经很像了。我来看看，<code>drive</code> 到底做了些什么。</p><blockquote><p>Tip: 其实我们不使用 <code>drive</code> 也可以完成相应的功能，就像上面那样。这些操作符 Unit（不知道怎么翻译），其实属于 RxCocoa，并不是标准的 Rx 框架。但是通过使用这些 Unit，确实可以让我们编程更加方便。详情可以参考最后的参考链接。</p></blockquote><p>drive 源码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">drive</span>&lt;O: ObserverType where O.E == E&gt;<span class="params">(observer: O)</span></span> -&gt; <span class="type">Disposable</span> &#123;</div><div class="line">    <span class="type">MainScheduler</span>.ensureExecutingOnScheduler()</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.asObservable().subscribe(observer)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从这里我们可以看出，其实 <code>drive</code> 函数保证了之后的操作是在主线程的。下面列举了使用 Unit 的一些好处：</p><ul><li>不会发送错误 （错误会导致 dispose）</li><li>工作在主线程 （对于 UI 操作，不用再切换线程）</li><li>共享同一个值 （不用再使用 shareReplay）</li></ul><p>OK，现在我们已经完全过渡到终极版本了。Nice work！</p><p>我们现在回过头来看 <code>GeolocationService</code> 的 <code>init</code> 方法。</p><p>片段：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">autorized = <span class="type">Observable</span>.deferred &#123; [<span class="keyword">weak</span> locationManager] <span class="keyword">in</span></div><div class="line">        <span class="keyword">let</span> status = <span class="type">CLLocationManager</span>.authorizationStatus() <span class="comment">// 1</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> locationManager = locationManager <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="type">Observable</span>.just(status)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> locationManager</div><div class="line">            .rx_didChangeAuthorizationStatus <span class="comment">// 2</span></div><div class="line">            .startWith(status) <span class="comment">// 3</span></div><div class="line">    &#125;</div><div class="line">    .asDriver(onErrorJustReturn: <span class="type">CLAuthorizationStatus</span>.<span class="type">NotDetermined</span>) <span class="comment">// 4</span></div><div class="line">    .<span class="built_in">map</span> &#123; <span class="comment">// 5</span></div><div class="line">        <span class="keyword">switch</span> $<span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">case</span> .<span class="type">AuthorizedAlways</span>:</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><ol><li>首先获取了一次地理位置授权状态</li><li>这里使用了 RxCocoa 的扩展，监听授权状态的变化（相比于 delegate 的方式，是不是爽多了）</li><li>将之前的 status 插入到序列的开头</li><li>将 Observable 转为 Observable，因为它使不回发送 error 的，所以这里要告诉它如果发生 error 直接发送 <code>.CLAuthorizationStatus.NotDetermined</code></li><li>最后将其 map 到 bool 类型</li></ol><p>OK，<code>location</code> 也是差不多的逻辑。你可以自己琢磨看看。</p><p>如果对 <code>Observable.deferred</code> 不是很理解，可以看看 <a href="https://github.com/futantan/RxSwiftCheatSheet#deferred" target="_blank" rel="external">这里</a></p><p>示例代码可以参见 RxSwiftExample，或者<a href="https://github.com/futantan/PrayerBlogCode" target="_blank" rel="external">这里</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Units.md" target="_blank" rel="external">https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Units.md</a><br><a href="http://t.swift.gg/d/39-021-units" target="_blank" rel="external">http://t.swift.gg/d/39-021-units</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里我们来从头实现 RxExample 的第三个例子：GeolocationExample。如果不知道如何开始，可以参考之前的几篇博文。&lt;/p&gt;
    
    </summary>
    
      <category term="Learn RxSwift The Hard Way" scheme="http://www.futantan.com/categories/Learn-RxSwift-The-Hard-Way/"/>
    
    
      <category term="iOS" scheme="http://www.futantan.com/tags/iOS/"/>
    
      <category term="RxSwift" scheme="http://www.futantan.com/tags/RxSwift/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift 速查手册</title>
    <link href="http://www.futantan.com/2016/05/05/RxSwiftCheatSheet/"/>
    <id>http://www.futantan.com/2016/05/05/RxSwiftCheatSheet/</id>
    <published>2016-05-05T12:04:36.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文档内容来自于 <a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="external">RxSwift</a> 的 Playground。记录大多数 ReactiveX 的概念和操作符。</p></blockquote><p><a href="https://github.com/futantan/RxSwiftCheatSheet" target="_blank" rel="external">GitHub 地址</a> </p><a id="more"></a><p>(部分翻译和注解来自 <a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Subject.html" target="_blank" rel="external">ReactiveX文档中文翻译</a>)</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="为什么使用-RxSwift"><a href="#为什么使用-RxSwift" class="headerlink" title="为什么使用 RxSwift?"></a>为什么使用 RxSwift?</h2><p>我们写的很多代码实际上是为了解决和响应外部事件。当用户操作一个控件的时候，我们需要使用 @IBAction 来响应事件。我们需要观察通知来检测键盘改变位置。当 URL Sessions 带着响应的数据返回时，我们需要提供闭包来执行我们的操作。我们还需要使用 KVO 来检测变量的值改变。这些大量的编写机制使得我们的代码结构变的更加复杂。如果有一种统一的编写机制来完成所有的这些调用/响应代码是不是更棒呢？Rx 就是为解决这些问题而生的。</p><h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h2><p>理解 RxSwift 的关键是理解 Observable 的概念。要理解它的创建，操作以及为了对变化做出响应操作而进行的订阅（subscribe）。</p><h2 id="创建和订阅-Observable"><a href="#创建和订阅-Observable" class="headerlink" title="创建和订阅 Observable"></a>创建和订阅 Observable</h2><p>要理解本框架，第一步需要理解如何创建 Observable。有很多函数可以创建 Observable。</p><p>创建 Observable 之后，如果没有订阅者订阅该 observable，那么什么事情也不会发生，所以我们将同时解释创建和订阅。</p><h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><p><code>empty</code> 创建一个空的序列。它仅发送 <code>.Completed</code> 消息。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"empty"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> emptySequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.empty()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> subscription = emptySequence</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--- empty example ---</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p><code>never</code> 创建一个序列，该序列永远不会发送消息，<code>.Completed</code> 消息也不会发送。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"never"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> neverSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.never()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> subscription = neverSequence</div><div class="line">        .subscribe &#123; <span class="number">_</span> <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"This block is never called."</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--- never example ---</div></pre></td></tr></table></figure></p><h3 id="just"><a href="#just" class="headerlink" title="just"></a>just</h3><p><code>just</code> 代表只包含一个元素的序列。它将向订阅者发送两个消息，第一个消息是其中元素的值，另一个是 <code>.Completed</code>。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"just"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> singleElementSequence = <span class="type">Observable</span>.just(<span class="number">32</span>)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> subscription = singleElementSequence</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--- just example ---</div><div class="line">Next(32)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="sequenceOf"><a href="#sequenceOf" class="headerlink" title="sequenceOf"></a>sequenceOf</h3><p><code>sequenceOf</code> 通过固定数目的元素创建一个序列</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"sequenceOf"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceOfElements<span class="comment">/* : Observable&lt;Int&gt; */</span> = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> subscription = sequenceOfElements</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">--- sequenceOf example ---</div><div class="line">Next(0)</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(4)</div><div class="line">Next(5)</div><div class="line">Next(6)</div><div class="line">Next(7)</div><div class="line">Next(8)</div><div class="line">Next(9)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="toObservable"><a href="#toObservable" class="headerlink" title="toObservable"></a>toObservable</h3><p><code>toObservable</code> 在一个数组的基础上创建一个序列</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"toObservable"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceFromArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].toObservable()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> subscription = sequenceFromArray</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">--- toObservable example ---</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(4)</div><div class="line">Next(5)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><p><code>create</code> 使用 Swift 闭包来创建一个序列。该例子中，创建了 <code>just</code> 操作符的自定义版本。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"create"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> myJust = &#123; (singleElement: <span class="type">Int</span>) -&gt; <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt; <span class="keyword">in</span></div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>.create &#123; observer <span class="keyword">in</span></div><div class="line">            observer.on(.<span class="type">Next</span>(singleElement))</div><div class="line">            observer.on(.<span class="type">Completed</span>)</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> subscription = myJust(<span class="number">5</span>)</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--- create example ---</div><div class="line">Next(5)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p><code>generate</code> 创建的序列可以自己生成它的值，并且在之前值的基础上来判断什么时候结束。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"generate"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> generated = <span class="type">Observable</span>.generate(</div><div class="line">        initialState: <span class="number">0</span>,</div><div class="line">        condition: &#123; $<span class="number">0</span> &lt; <span class="number">3</span> &#125;,</div><div class="line">        iterate: &#123; $<span class="number">0</span> + <span class="number">1</span> &#125;</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="keyword">let</span> subscription = generated</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--- generate example ---</div><div class="line">Next(0)</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><p>创建一个不发送任何 item 的 Observable，以 error 中指</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"error"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> error = <span class="type">NSError</span>(domain: <span class="string">"Test"</span>, code: -<span class="number">1</span>, userInfo: <span class="literal">nil</span>)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> erroredSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.error(error)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> subscription = erroredSequence</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--- error example ---</div><div class="line">Error(Error Domain=Test Code=-1 &quot;(null)&quot;)</div></pre></td></tr></table></figure><h3 id="deferred"><a href="#deferred" class="headerlink" title="deferred"></a>deferred</h3><p>直到 observer 订阅之后才创建 Observable，并且为每一个 observer 创建一个全新的 Observable<br>do not create the Observable until the observer subscribes, and create a fresh Observable for each observer</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/defer.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/defer.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"deferred"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> deferredSequence: <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt; = <span class="type">Observable</span>.deferred &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"creating"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="type">Observable</span>.create &#123; observer <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"emmiting"</span>)</div><div class="line">            observer.on(.<span class="type">Next</span>(<span class="number">0</span>))</div><div class="line">            observer.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">            observer.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="number">_</span> = deferredSequence</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">         &#125;</div><div class="line"></div><div class="line">    <span class="number">_</span> = deferredSequence</div><div class="line">        .subscribe &#123; event <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">         &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">--- deferred example ---</div><div class="line">creating</div><div class="line">emmiting</div><div class="line">Next(0)</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">creating</div><div class="line">emmiting</div><div class="line">Next(0)</div><div class="line">Next(1)</div><div class="line">Next(2)</div></pre></td></tr></table></figure><p>在 RxCocoa 库中还有很多其他非常有用的方法，例如：</p><ul><li><code>rx_observe</code> 存在于所有 NSObject 子类中，封装了 KVO</li><li><code>rx_tap</code> 存在于 button 中，封装了 @IBActions</li><li><code>rx_notification</code> 封装了 NotificationCenter</li><li>…</li></ul><h1 id="Subjects"><a href="#Subjects" class="headerlink" title="Subjects"></a>Subjects</h1><p>Subject 可以看成是一个桥梁或者代理，在某些ReactiveX实现中，它同时充当了 Observer 和 Observable 的角色。因为它是一个Observer，它可以订阅一个或多个 Observable；又因为它是一个 Observable，它可以转发它收到(Observe)的数据，也可以发射新的数据。</p><p>辅助函数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeSequenceToConsole</span>&lt;O: ObservableType&gt;<span class="params">(name: String, sequence: O)</span></span> -&gt; <span class="type">Disposable</span> &#123;</div><div class="line">    <span class="keyword">return</span> sequence</div><div class="line">        .subscribe &#123; e <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"Subscription: \(name), event: \(e)"</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h2><p><code>PublishSubject</code> 只会把在订阅发生的时间点之后来自原始Observable的数据发射给观察者。</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/publishsubject.png" alt=""></p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/publishsubject_error.png" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"PublishSubject"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> subject = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    writeSequenceToConsole(<span class="string">"1"</span>, sequence: subject).addDisposableTo(disposeBag)</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"a"</span>))</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"b"</span>))</div><div class="line">    writeSequenceToConsole(<span class="string">"2"</span>, sequence: subject).addDisposableTo(disposeBag)</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"c"</span>))</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"d"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">--- PublishSubject example ---</div><div class="line">Subscription: 1, event: Next(a)</div><div class="line">Subscription: 1, event: Next(b)</div><div class="line">Subscription: 1, event: Next(c)</div><div class="line">Subscription: 2, event: Next(c)</div><div class="line">Subscription: 1, event: Next(d)</div><div class="line">Subscription: 2, event: Next(d)</div></pre></td></tr></table></figure><h2 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h2><p><code>ReplaySubject</code> 会发射所有来自原始Observable的数据给观察者，无论它们是何时订阅的。当一个新的 observer 订阅了一个 <code>ReplaySubject</code> 之后，他将会收到当前缓存在 buffer 中的数据和这之后产生的新数据。在下面的例子中，缓存大小为 <code>1</code> 所以 observer 将最多能够收到订阅时间点之前的一个数据。例如，<code>Subscription: 2</code> 能够收到消息 <code>&quot;b&quot;</code>，而这个消息是在他订阅之前发送的，但是没有办法收到消息 <code>&quot;a&quot;</code> 因为缓存的容量小于 <code>2</code>。</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/replaysubject.png" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"ReplaySubject"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    <span class="keyword">let</span> subject = <span class="type">ReplaySubject</span>&lt;<span class="type">String</span>&gt;.create(bufferSize: <span class="number">1</span>)</div><div class="line"></div><div class="line">    writeSequenceToConsole(<span class="string">"1"</span>, sequence: subject).addDisposableTo(disposeBag)</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"a"</span>))</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"b"</span>))</div><div class="line">    writeSequenceToConsole(<span class="string">"2"</span>, sequence: subject).addDisposableTo(disposeBag)</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"c"</span>))</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"d"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--- ReplaySubject example ---  </div><div class="line">Subscription: 1, event: Next(a)  </div><div class="line">Subscription: 1, event: Next(b)  </div><div class="line">Subscription: 2, event: Next(b)  </div><div class="line">Subscription: 1, event: Next(c)  </div><div class="line">Subscription: 2, event: Next(c)  </div><div class="line">Subscription: 1, event: Next(d)  </div><div class="line">Subscription: 2, event: Next(d)</div></pre></td></tr></table></figure><h2 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h2><p>当观察者订阅 <code>BehaviorSubject</code> 时，它开始发射原始 Observable 最近发射的数据（如果此时还没有收到任何数据，它会发射一个默认值），然后继续发射其它任何来自原始Observable的数据。 </p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/behaviorsubject.png" alt=""></p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/behaviorsubject_error.png" alt=""></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"BehaviorSubject"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> subject = <span class="type">BehaviorSubject</span>(value: <span class="string">"z"</span>)</div><div class="line">    writeSequenceToConsole(<span class="string">"1"</span>, sequence: subject).addDisposableTo(disposeBag)</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"a"</span>))</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"b"</span>))</div><div class="line">    writeSequenceToConsole(<span class="string">"2"</span>, sequence: subject).addDisposableTo(disposeBag)</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"c"</span>))</div><div class="line">    subject.on(.<span class="type">Next</span>(<span class="string">"d"</span>))</div><div class="line">    subject.on(.<span class="type">Completed</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">--- BehaviorSubject example ---</div><div class="line">Subscription: 1, event: Next(z)</div><div class="line">Subscription: 1, event: Next(a)</div><div class="line">Subscription: 1, event: Next(b)</div><div class="line">Subscription: 2, event: Next(b)</div><div class="line">Subscription: 1, event: Next(c)</div><div class="line">Subscription: 2, event: Next(c)</div><div class="line">Subscription: 1, event: Next(d)</div><div class="line">Subscription: 2, event: Next(d)</div><div class="line">Subscription: 1, event: Completed</div><div class="line">Subscription: 2, event: Completed</div></pre></td></tr></table></figure><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p><code>Variable</code> 封装了 <code>BehaviorSubject</code>。使用 variable 的好处是 variable 将不会显式的发送 <code>Error</code> 或者 <code>Completed</code>。在 deallocated 的时候，<code>Variable</code> 会自动的发送 complete 事件。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"Variable"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    <span class="keyword">let</span> variable = <span class="type">Variable</span>(<span class="string">"z"</span>)</div><div class="line">    writeSequenceToConsole(<span class="string">"1"</span>, sequence: variable.asObservable()).addDisposableTo(disposeBag)</div><div class="line">    variable.value = <span class="string">"a"</span></div><div class="line">    variable.value = <span class="string">"b"</span></div><div class="line">    writeSequenceToConsole(<span class="string">"2"</span>, sequence: variable.asObservable()).addDisposableTo(disposeBag)</div><div class="line">    variable.value = <span class="string">"c"</span></div><div class="line">    variable.value = <span class="string">"d"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">--- Variable example ---</div><div class="line">Subscription: 1, event: Next(z)</div><div class="line">Subscription: 1, event: Next(a)</div><div class="line">Subscription: 1, event: Next(b)</div><div class="line">Subscription: 2, event: Next(b)</div><div class="line">Subscription: 1, event: Next(c)</div><div class="line">Subscription: 2, event: Next(c)</div><div class="line">Subscription: 1, event: Next(d)</div><div class="line">Subscription: 2, event: Next(d)</div><div class="line">Subscription: 1, event: Completed</div><div class="line">Subscription: 2, event: Completed</div></pre></td></tr></table></figure><h2 id="变换操作"><a href="#变换操作" class="headerlink" title="变换操作"></a>变换操作</h2><p>下面列出了可用于对 Observable 发射的数据执行变换操作的各种操作符。</p><h3 id="map-select"><a href="#map-select" class="headerlink" title="map / select"></a><code>map</code> / <code>select</code></h3><p>对序列的每一项都应用一个函数来变换 Observable 发射的数据序列</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/map.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/map.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"map"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> originalSequence = <span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">    <span class="number">_</span> = originalSequence</div><div class="line">        .<span class="built_in">map</span> &#123; number <span class="keyword">in</span></div><div class="line">            number * <span class="number">2</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123; <span class="built_in">print</span>($<span class="number">0</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--- map example ---</div><div class="line">Next(2)</div><div class="line">Next(4)</div><div class="line">Next(6)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a><code>flatMap</code></h3><p>将每个 Obserable 发射的数据变换为 Observable 的集合，然后将其 “拍扁”（降维 flatten）成一个 Observable。</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/flatmap.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/flatmap.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"flatMap"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceInt = <span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> sequenceString = <span class="type">Observable</span>.of(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"--"</span>)</div><div class="line"></div><div class="line">    <span class="number">_</span> = sequenceInt</div><div class="line">        .flatMap &#123; (x:<span class="type">Int</span>) -&gt; <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(<span class="string">"from sequenceInt \(x)"</span>)</div><div class="line">            <span class="keyword">return</span> sequenceString</div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">--- flatMap example ---</div><div class="line">from sequenceInt 1</div><div class="line">Next(A)</div><div class="line">Next(B)</div><div class="line">Next(C)</div><div class="line">Next(D)</div><div class="line">Next(E)</div><div class="line">Next(F)</div><div class="line">Next(--)</div><div class="line">from sequenceInt 2</div><div class="line">Next(A)</div><div class="line">Next(B)</div><div class="line">Next(C)</div><div class="line">Next(D)</div><div class="line">Next(E)</div><div class="line">Next(F)</div><div class="line">Next(--)</div><div class="line">from sequenceInt 3</div><div class="line">Next(A)</div><div class="line">Next(B)</div><div class="line">Next(C)</div><div class="line">Next(D)</div><div class="line">Next(E)</div><div class="line">Next(F)</div><div class="line">Next(--)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="scan"><a href="#scan" class="headerlink" title="scan"></a><code>scan</code></h3><p>对 Observable 发射的每一项数据应用一个函数，然后按顺序依次发射每一个值</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/scan.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/scan.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"scan"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceToSum = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line"></div><div class="line">    <span class="number">_</span> = sequenceToSum</div><div class="line">        .scan(<span class="number">0</span>) &#123; acum, elem <span class="keyword">in</span></div><div class="line">            acum + elem</div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--- scan example ---</div><div class="line">Next(0)</div><div class="line">Next(1)</div><div class="line">Next(3)</div><div class="line">Next(6)</div><div class="line">Next(10)</div><div class="line">Next(15)</div><div class="line">Completed</div></pre></td></tr></table></figure><h2 id="过滤操作"><a href="#过滤操作" class="headerlink" title="过滤操作"></a>过滤操作</h2><p>从源 Observable 中选择特定的数据发送</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a><code>filter</code></h3><p>只发送 Observable 中通过特定测试的数据</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/filter.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/filter.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"filter"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> subscription = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</div><div class="line">        .<span class="built_in">filter</span> &#123;</div><div class="line">            $<span class="number">0</span> % <span class="number">2</span> == <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">--- filter example ---</div><div class="line">Next(0)</div><div class="line">Next(2)</div><div class="line">Next(4)</div><div class="line">Next(6)</div><div class="line">Next(8)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a><code>distinctUntilChanged</code></h3><p>过滤掉连续重复的数据</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/distinct.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/distinct.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"distinctUntilChanged"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> subscription = <span class="type">Observable</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>)</div><div class="line">        .distinctUntilChanged()</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">--- distinctUntilChanged example ---</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(1)</div><div class="line">Next(4)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="take"><a href="#take" class="headerlink" title="take"></a><code>take</code></h3><p>仅发送 Observable 的前 n 个数据项</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/take.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/take.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">example(&quot;take&quot;) &#123;</div><div class="line">    let subscription = Observable.of(1, 2, 3, 4, 5, 6)</div><div class="line">        .take(3)</div><div class="line">        .subscribe &#123;</div><div class="line">            print($0)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--- take example ---</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Completed</div></pre></td></tr></table></figure><h2 id="结合操作-Combination-operators"><a href="#结合操作-Combination-operators" class="headerlink" title="结合操作(Combination operators)"></a>结合操作(Combination operators)</h2><p>将多个 Observable 结合成一个 Observable</p><h3 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a><code>startWith</code></h3><p>在数据序列的开头增加一些数据</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/startwith.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/startwith.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"startWith"</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> subscription = <span class="type">Observable</span>.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</div><div class="line">        .startWith(<span class="number">3</span>)</div><div class="line">        .startWith(<span class="number">2</span>)</div><div class="line">        .startWith(<span class="number">1</span>)</div><div class="line">        .startWith(<span class="number">0</span>)</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">--- startWith example ---</div><div class="line">Next(0)</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(4)</div><div class="line">Next(5)</div><div class="line">Next(6)</div><div class="line">Next(7)</div><div class="line">Next(8)</div><div class="line">Next(9)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a><code>combineLatest</code></h3><p>当两个 Observables 中的任何一个发射了一个数据时，通过一个指定的函数组合每个Observable发射的最新数据（一共两个数据），然后发射这个函数的结果</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/combinelatest.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/combinelatest.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"combineLatest 1"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> intOb1 = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    <span class="keyword">let</span> intOb2 = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = <span class="type">Observable</span>.combineLatest(intOb1, intOb2) &#123;</div><div class="line">        <span class="string">"\($0) \($1)"</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    intOb1.on(.<span class="type">Next</span>(<span class="string">"A"</span>))</div><div class="line"></div><div class="line">    intOb2.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line"></div><div class="line">    intOb1.on(.<span class="type">Next</span>(<span class="string">"B"</span>))</div><div class="line"></div><div class="line">    intOb2.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">--- combineLatest 1 example ---</div><div class="line">Next(A 1)</div><div class="line">Next(B 1)</div><div class="line">Next(B 2)</div></pre></td></tr></table></figure><p>为了能够产生结果，两个序列中都必须保证至少有一个元素</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"combineLatest 2"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> intOb1 = <span class="type">Observable</span>.just(<span class="number">2</span>)</div><div class="line">    <span class="keyword">let</span> intOb2 = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line">    <span class="number">_</span> = <span class="type">Observable</span>.combineLatest(intOb1, intOb2) &#123;</div><div class="line">            $<span class="number">0</span> * $<span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">--- combineLatest 2 example ---</div><div class="line">Next(0)</div><div class="line">Next(2)</div><div class="line">Next(4)</div><div class="line">Next(6)</div><div class="line">Next(8)</div><div class="line">Completed</div></pre></td></tr></table></figure><p>Combine latest 有超过 2 个参数的版本</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"combineLatest 3"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> intOb1 = <span class="type">Observable</span>.just(<span class="number">2</span>)</div><div class="line">    <span class="keyword">let</span> intOb2 = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="keyword">let</span> intOb3 = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line">    <span class="number">_</span> = <span class="type">Observable</span>.combineLatest(intOb1, intOb2, intOb3) &#123;</div><div class="line">            ($<span class="number">0</span> + $<span class="number">1</span>) * $<span class="number">2</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">--- combineLatest 3 example ---</div><div class="line">Next(0)</div><div class="line">Next(5)</div><div class="line">Next(10)</div><div class="line">Next(15)</div><div class="line">Next(20)</div><div class="line">Completed</div></pre></td></tr></table></figure><p>Combinelatest 可以作用于不同数据类型的序列</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"combineLatest 4"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> intOb = <span class="type">Observable</span>.just(<span class="number">2</span>)</div><div class="line">    <span class="keyword">let</span> stringOb = <span class="type">Observable</span>.just(<span class="string">"a"</span>)</div><div class="line">    </div><div class="line">    <span class="number">_</span> = <span class="type">Observable</span>.combineLatest(intOb, stringOb) &#123;</div><div class="line">            <span class="string">"\($0) "</span> + $<span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--- combineLatest 4 example ---</div><div class="line">Next(2 a)</div><div class="line">Completed</div></pre></td></tr></table></figure><p><code>combineLatest</code> 方法可以在 Array 上使用，数组元素类型必须遵循 <code>ObservableType</code> 协议<br>数组中的元素类型必须为 <code>Observables</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"combineLatest 5"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> intOb1 = <span class="type">Observable</span>.just(<span class="number">2</span>)</div><div class="line">    <span class="keyword">let</span> intOb2 = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="keyword">let</span> intOb3 = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">    </div><div class="line">    <span class="number">_</span> = [intOb1, intOb2, intOb3].combineLatest &#123; intArray -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">            <span class="type">Int</span>((intArray[<span class="number">0</span>] + intArray[<span class="number">1</span>]) * intArray[<span class="number">2</span>])</div><div class="line">        &#125;</div><div class="line">        .subscribe &#123; (event: <span class="type">Event</span>&lt;<span class="type">Int</span>&gt;) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(event)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a><code>zip</code></h3><p>使用一个函数组合多个Observable发射的数据集合，然后再发射这个结果(从序列中依次取数据)</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/zip.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/zip.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"zip 1"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> intOb1 = <span class="type">PublishSubject</span>&lt;<span class="type">String</span>&gt;()</div><div class="line">    <span class="keyword">let</span> intOb2 = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = <span class="type">Observable</span>.<span class="built_in">zip</span>(intOb1, intOb2) &#123;</div><div class="line">        <span class="string">"\($0) \($1)"</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    intOb1.on(.<span class="type">Next</span>(<span class="string">"A"</span>))</div><div class="line"></div><div class="line">    intOb2.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line"></div><div class="line">    intOb1.on(.<span class="type">Next</span>(<span class="string">"B"</span>))</div><div class="line"></div><div class="line">    intOb1.on(.<span class="type">Next</span>(<span class="string">"C"</span>))</div><div class="line"></div><div class="line">    intOb2.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--- zip 1 example ---</div><div class="line">Next(A 1)</div><div class="line">Next(B 2)</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"zip 2"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> intOb1 = <span class="type">Observable</span>.just(<span class="number">2</span>)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> intOb2 = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line">    <span class="number">_</span> = <span class="type">Observable</span>.<span class="built_in">zip</span>(intOb1, intOb2) &#123;</div><div class="line">            $<span class="number">0</span> * $<span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--- zip 2 example ---</div><div class="line">Next(0)</div><div class="line">Completed</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"zip 3"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> intOb1 = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>)</div><div class="line">    <span class="keyword">let</span> intOb2 = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="keyword">let</span> intOb3 = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line"></div><div class="line">    <span class="number">_</span> = <span class="type">Observable</span>.<span class="built_in">zip</span>(intOb1, intOb2, intOb3) &#123;</div><div class="line">            ($<span class="number">0</span> + $<span class="number">1</span>) * $<span class="number">2</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">--- zip 3 example ---</div><div class="line">Next(0)</div><div class="line">Next(2)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a><code>merge</code></h3><p>合并多个 Observables 的组合成一个</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/merge.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/merge.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"merge 1"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> subject1 = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    <span class="keyword">let</span> subject2 = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = <span class="type">Observable</span>.of(subject1, subject2)</div><div class="line">        .merge()</div><div class="line">        .subscribeNext &#123; int <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(int)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">20</span>))</div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">40</span>))</div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">60</span>))</div><div class="line">    subject2.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">80</span>))</div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">100</span>))</div><div class="line">    subject2.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--- merge 1 example ---</div><div class="line">20</div><div class="line">40</div><div class="line">60</div><div class="line">1</div><div class="line">80</div><div class="line">100</div><div class="line">1</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"merge 2"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> subject1 = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    <span class="keyword">let</span> subject2 = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = <span class="type">Observable</span>.of(subject1, subject2)</div><div class="line">        .merge(maxConcurrent: <span class="number">2</span>)</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">20</span>))</div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">40</span>))</div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">60</span>))</div><div class="line">    subject2.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">80</span>))</div><div class="line">    subject1.on(.<span class="type">Next</span>(<span class="number">100</span>))</div><div class="line">    subject2.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--- merge 2 example ---</div><div class="line">Next(20)</div><div class="line">Next(40)</div><div class="line">Next(60)</div><div class="line">Next(1)</div><div class="line">Next(80)</div><div class="line">Next(100)</div><div class="line">Next(1)</div></pre></td></tr></table></figure><h3 id="switchLatest"><a href="#switchLatest" class="headerlink" title="switchLatest"></a><code>switchLatest</code></h3><p>将一个发射多个 Observables 的 Observable 转换成另一个单独的 Observable，后者发射那些 Observables 最近发射的数据项</p><p>Switch 订阅一个发射多个 Observables 的 Observable。它每次观察那些 Observables 中的一个，Switch 返回的这个Observable取消订阅前一个发射数据的 Observable，开始发射最近的Observable 发射的数据。注意：当原始 Observable 发射了一个新的 Observable 时（不是这个新的 Observable 发射了一条数据时），它将取消订阅之前的那个 Observable。这意味着，在后来那个 Observable 产生之后到它开始发射数据之前的这段时间里，前一个 Observable 发射的数据将被丢弃</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/switch.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/switch.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"switchLatest"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> var1 = <span class="type">Variable</span>(<span class="number">0</span>)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> var2 = <span class="type">Variable</span>(<span class="number">200</span>)</div><div class="line"></div><div class="line">    <span class="comment">// var3 is like an Observable&lt;Observable&lt;Int&gt;&gt;</span></div><div class="line">    <span class="keyword">let</span> var3 = <span class="type">Variable</span>(var1.asObservable())</div><div class="line"></div><div class="line">    <span class="keyword">let</span> d = var3</div><div class="line">        .asObservable()</div><div class="line">        .switchLatest()</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    var1.value = <span class="number">1</span></div><div class="line">    var1.value = <span class="number">2</span></div><div class="line">    var1.value = <span class="number">3</span></div><div class="line">    var1.value = <span class="number">4</span></div><div class="line"></div><div class="line">    var3.value = var2.asObservable()</div><div class="line"></div><div class="line">    var2.value = <span class="number">201</span></div><div class="line"></div><div class="line">    var1.value = <span class="number">5</span></div><div class="line">    var1.value = <span class="number">6</span></div><div class="line">    var1.value = <span class="number">7</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">--- switchLatest example ---</div><div class="line">Next(0)</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(4)</div><div class="line">Next(200)</div><div class="line">Next(201)</div><div class="line">Completed</div></pre></td></tr></table></figure><h2 id="Error-Handling-Operators"><a href="#Error-Handling-Operators" class="headerlink" title="Error Handling Operators"></a>Error Handling Operators</h2><p>下面的操作符帮助我们从 Observable 发射的 error 通知做出响应或者从错误中恢复。</p><h3 id="catchError"><a href="#catchError" class="headerlink" title="catchError"></a><code>catchError</code></h3><p>收到 <code>Error</code> 通知之后，转而发送一个没有错误的序列。</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/catch.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/catch.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"catchError 1"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceThatFails = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    <span class="keyword">let</span> recoverySequence = <span class="type">Observable</span>.of(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>)</div><div class="line"></div><div class="line">    <span class="number">_</span> = sequenceThatFails</div><div class="line">        .catchError &#123; error <span class="keyword">in</span></div><div class="line">            <span class="keyword">return</span> recoverySequence</div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    sequenceThatFails.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    sequenceThatFails.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">    sequenceThatFails.on(.<span class="type">Next</span>(<span class="number">3</span>))</div><div class="line">    sequenceThatFails.on(.<span class="type">Next</span>(<span class="number">4</span>))</div><div class="line">    sequenceThatFails.on(.<span class="type">Error</span>(<span class="type">NSError</span>(domain: <span class="string">"Test"</span>, code: <span class="number">0</span>, userInfo: <span class="literal">nil</span>)))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">--- catchError 1 example ---</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(4)</div><div class="line">Next(100)</div><div class="line">Next(200)</div><div class="line">Next(300)</div><div class="line">Next(400)</div><div class="line">Completed</div></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"catchError 2"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceThatFails = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = sequenceThatFails</div><div class="line">        .catchErrorJustReturn(<span class="number">100</span>)</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    sequenceThatFails.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    sequenceThatFails.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">    sequenceThatFails.on(.<span class="type">Next</span>(<span class="number">3</span>))</div><div class="line">    sequenceThatFails.on(.<span class="type">Next</span>(<span class="number">4</span>))</div><div class="line">    sequenceThatFails.on(.<span class="type">Error</span>(<span class="type">NSError</span>(domain: <span class="string">"Test"</span>, code: <span class="number">0</span>, userInfo: <span class="literal">nil</span>)))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">--- catchError 2 example ---</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(4)</div><div class="line">Next(100)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="retry"><a href="#retry" class="headerlink" title="retry"></a><code>retry</code></h3><p>如果原始 Observable 遇到错误，重新订阅，心里默念，不会出错不会出错…</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/retry.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/retry.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"retry"</span>) &#123;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span> = <span class="number">1</span> <span class="comment">// bad practice, only for example purposes</span></div><div class="line">    <span class="keyword">let</span> funnyLookingSequence = <span class="type">Observable</span>&lt;<span class="type">Int</span>&gt;.create &#123; observer <span class="keyword">in</span></div><div class="line">        <span class="keyword">let</span> error = <span class="type">NSError</span>(domain: <span class="string">"Test"</span>, code: <span class="number">0</span>, userInfo: <span class="literal">nil</span>)</div><div class="line">        observer.on(.<span class="type">Next</span>(<span class="number">0</span>))</div><div class="line">        observer.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">        observer.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &lt; <span class="number">2</span> &#123;</div><div class="line">            observer.on(.<span class="type">Error</span>(error))</div><div class="line">            <span class="built_in">count</span> += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        observer.on(.<span class="type">Next</span>(<span class="number">3</span>))</div><div class="line">        observer.on(.<span class="type">Next</span>(<span class="number">4</span>))</div><div class="line">        observer.on(.<span class="type">Next</span>(<span class="number">5</span>))</div><div class="line">        observer.on(.<span class="type">Completed</span>)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="type">NopDisposable</span>.instance</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="number">_</span> = funnyLookingSequence</div><div class="line">        .retry()</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">--- retry example ---</div><div class="line">Next(0)</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(0)</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(4)</div><div class="line">Next(5)</div><div class="line">Completed</div></pre></td></tr></table></figure><h2 id="Observable-Utility-Operators"><a href="#Observable-Utility-Operators" class="headerlink" title="Observable Utility Operators"></a>Observable Utility Operators</h2><p>下面的操作符可以当做一个工具集，方便操作 Observable</p><h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a><code>subscribe</code></h3><p><a href="http://reactivex.io/documentation/operators/subscribe.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"subscribe"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceOfInts = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = sequenceOfInts</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    sequenceOfInts.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    sequenceOfInts.on(.<span class="type">Completed</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--- subscribe example ---</div><div class="line">Next(1)</div><div class="line">Completed</div></pre></td></tr></table></figure><p>下面是几个 <code>subscribe</code> 操作符的变体</p><h3 id="subscribeNext"><a href="#subscribeNext" class="headerlink" title="subscribeNext"></a><code>subscribeNext</code></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"subscribeNext"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceOfInts = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = sequenceOfInts</div><div class="line">        .subscribeNext &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    sequenceOfInts.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    sequenceOfInts.on(.<span class="type">Completed</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--- subscribeNext example ---</div><div class="line">1</div></pre></td></tr></table></figure><h3 id="subscribeCompleted"><a href="#subscribeCompleted" class="headerlink" title="subscribeCompleted"></a><code>subscribeCompleted</code></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"subscribeCompleted"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceOfInts = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = sequenceOfInts</div><div class="line">        .subscribeCompleted &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"It's completed"</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    sequenceOfInts.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    sequenceOfInts.on(.<span class="type">Completed</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--- subscribeCompleted example ---</div><div class="line">It&apos;s completed</div></pre></td></tr></table></figure><h3 id="subscribeError"><a href="#subscribeError" class="headerlink" title="subscribeError"></a><code>subscribeError</code></h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"subscribeError"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceOfInts = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = sequenceOfInts</div><div class="line">        .subscribeError &#123; error <span class="keyword">in</span></div><div class="line">            <span class="built_in">print</span>(error)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    sequenceOfInts.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    sequenceOfInts.on(.<span class="type">Error</span>(<span class="type">NSError</span>(domain: <span class="string">"Examples"</span>, code: -<span class="number">1</span>, userInfo: <span class="literal">nil</span>)))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--- subscribeError example ---</div><div class="line">Error Domain=Examples Code=-1 &quot;(null)&quot;</div></pre></td></tr></table></figure><h3 id="doOn"><a href="#doOn" class="headerlink" title="doOn"></a><code>doOn</code></h3><p>注册一个操作来监听事件的生命周期<br>（register an action to take upon a variety of Observable lifecycle events）</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/do.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/do.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"doOn"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> sequenceOfInts = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = sequenceOfInts</div><div class="line">        .doOn &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Intercepted event \($0)"</span>)</div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    sequenceOfInts.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    sequenceOfInts.on(.<span class="type">Completed</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--- doOn example ---</div><div class="line">Intercepted event Next(1)</div><div class="line">Next(1)</div><div class="line">Intercepted event Completed</div><div class="line">Completed</div></pre></td></tr></table></figure><h2 id="条件和布尔操作（Conditional-and-Boolean-Operators）"><a href="#条件和布尔操作（Conditional-and-Boolean-Operators）" class="headerlink" title="条件和布尔操作（Conditional and Boolean Operators）"></a>条件和布尔操作（Conditional and Boolean Operators）</h2><p>下面的操作符可用于根据条件发射或变换 Observables，或者对它们做布尔运算：</p><h3 id="takeUntil"><a href="#takeUntil" class="headerlink" title="takeUntil"></a><code>takeUntil</code></h3><p>当第二个 Observable 发送数据之后，丢弃第一个 Observable 在这之后的所有消息。</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/takeuntil.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/takeuntil.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"takeUntil"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> originalSequence = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line">    <span class="keyword">let</span> whenThisSendsNextWorldStops = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = originalSequence</div><div class="line">        .takeUntil(whenThisSendsNextWorldStops)</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    originalSequence.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    originalSequence.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">    originalSequence.on(.<span class="type">Next</span>(<span class="number">3</span>))</div><div class="line">    originalSequence.on(.<span class="type">Next</span>(<span class="number">4</span>))</div><div class="line"></div><div class="line">    whenThisSendsNextWorldStops.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line"></div><div class="line">    originalSequence.on(.<span class="type">Next</span>(<span class="number">5</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">--- takeUntil example ---</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(4)</div><div class="line">Completed</div></pre></td></tr></table></figure><h3 id="takeWhile"><a href="#takeWhile" class="headerlink" title="takeWhile"></a><code>takeWhile</code></h3><p>发送原始 Observable 的数据，直到一个特定的条件为 false</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/takewhile.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/takewhile.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"takeWhile"</span>) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> sequence = <span class="type">PublishSubject</span>&lt;<span class="type">Int</span>&gt;()</div><div class="line"></div><div class="line">    <span class="number">_</span> = sequence</div><div class="line">        .takeWhile &#123; int <span class="keyword">in</span></div><div class="line">            int &lt; <span class="number">4</span></div><div class="line">        &#125;</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    sequence.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    sequence.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">    sequence.on(.<span class="type">Next</span>(<span class="number">3</span>))</div><div class="line">    sequence.on(.<span class="type">Next</span>(<span class="number">4</span>))</div><div class="line">    sequence.on(.<span class="type">Next</span>(<span class="number">5</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--- takeWhile example ---</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Completed</div></pre></td></tr></table></figure><h2 id="算数和聚合-Mathematical-and-Aggregate-Operators"><a href="#算数和聚合-Mathematical-and-Aggregate-Operators" class="headerlink" title="算数和聚合(Mathematical and Aggregate Operators)"></a>算数和聚合(Mathematical and Aggregate Operators)</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a><code>concat</code></h3><p>合并两个或者以上的 Observable 的消息，并且这些消息的发送时间不会交叉。（队列先后顺序不会交叉）</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/concat.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/concat.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"concat"</span>) &#123;</div><div class="line">    <span class="keyword">let</span> var1 = <span class="type">BehaviorSubject</span>(value: <span class="number">0</span>)</div><div class="line">    <span class="keyword">let</span> var2 = <span class="type">BehaviorSubject</span>(value: <span class="number">200</span>)</div><div class="line">    </div><div class="line">    <span class="comment">// var3 is like an Observable&lt;Observable&lt;Int&gt;&gt;</span></div><div class="line">    <span class="keyword">let</span> var3 = <span class="type">BehaviorSubject</span>(value: var1)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> d = var3</div><div class="line">        .concat()</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    var1.on(.<span class="type">Next</span>(<span class="number">1</span>))</div><div class="line">    var1.on(.<span class="type">Next</span>(<span class="number">2</span>))</div><div class="line">    var1.on(.<span class="type">Next</span>(<span class="number">3</span>))</div><div class="line">    var1.on(.<span class="type">Next</span>(<span class="number">4</span>))</div><div class="line">    </div><div class="line">    var3.on(.<span class="type">Next</span>(var2))</div><div class="line">    </div><div class="line">    var2.on(.<span class="type">Next</span>(<span class="number">201</span>))</div><div class="line">    </div><div class="line">    var1.on(.<span class="type">Next</span>(<span class="number">5</span>))</div><div class="line">    var1.on(.<span class="type">Next</span>(<span class="number">6</span>))</div><div class="line">    var1.on(.<span class="type">Next</span>(<span class="number">7</span>))</div><div class="line">    var1.on(.<span class="type">Completed</span>)</div><div class="line">    </div><div class="line">    var2.on(.<span class="type">Next</span>(<span class="number">202</span>))</div><div class="line">    var2.on(.<span class="type">Next</span>(<span class="number">203</span>))</div><div class="line">    var2.on(.<span class="type">Next</span>(<span class="number">204</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">--- concat example ---</div><div class="line">Next(0)</div><div class="line">Next(1)</div><div class="line">Next(2)</div><div class="line">Next(3)</div><div class="line">Next(4)</div><div class="line">Next(5)</div><div class="line">Next(6)</div><div class="line">Next(7)</div><div class="line">Next(201)</div><div class="line">Next(202)</div><div class="line">Next(203)</div><div class="line">Next(204)</div></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a><code>reduce</code></h3><p>按顺序对Observable发射的每项数据应用一个函数并发射最终的值。<br><code>Reduce</code> 操作符对原始 Observable 发射数据的第一项应用一个函数，然后再将这个函数的返回值与第二项数据一起传递给函数，以此类推，持续这个过程知道原始Observable发射它的最后一项数据并终止，此时 Reduce 返回的 Observable 发射这个函数返回的最终值。与数组序列的 <code>reduce</code> 操作类似。</p><p><img src="https://raw.githubusercontent.com/kzaher/rxswiftcontent/master/MarbleDiagrams/png/reduce.png" alt=""></p><p><a href="http://reactivex.io/documentation/operators/reduce.html" target="_blank" rel="external">更多相关内容请查看 reactive.io</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">example(<span class="string">"reduce"</span>) &#123;</div><div class="line">    <span class="number">_</span> = <span class="type">Observable</span>.of(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</div><div class="line">        .<span class="built_in">reduce</span>(<span class="number">0</span>, accumulator: +)</div><div class="line">        .subscribe &#123;</div><div class="line">            <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--- reduce example ---</div><div class="line">Next(45)</div><div class="line">Completed</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文档内容来自于 &lt;a href=&quot;https://github.com/ReactiveX/RxSwift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxSwift&lt;/a&gt; 的 Playground。记录大多数 ReactiveX 的概念和操作符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/futantan/RxSwiftCheatSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub 地址&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="RxSwift" scheme="http://www.futantan.com/tags/RxSwift/"/>
    
  </entry>
  
  <entry>
    <title>Learn RxSwift The Hard Way - Calculator (二)</title>
    <link href="http://www.futantan.com/2016/05/03/Learn-RxSwift-The-Hard-Way-Calculator/"/>
    <id>http://www.futantan.com/2016/05/03/Learn-RxSwift-The-Hard-Way-Calculator/</id>
    <published>2016-05-03T14:56:36.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>To RxSwift:<br>初次见面，请多关照。</p><a id="more"></a><p>Demo 的 GitHub 地址：<a href="https://github.com/futantan/PrayerBlogCode/tree/master/RxSwiftDemo" target="_blank" rel="external">RxSwiftDemo</a></p><p>这里我们将实现 RxSwift Demo 中最简单的一个例子，加法器。</p><p><img src="/media/14622874699158.jpg" width="400"></p><p>如图所示，有三个 UITextField，代表着三个输入的数字，最后是一个显示结果的 Label。这里的逻辑很简单，就不给大家展示代码了。</p><p>主要的逻辑代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="type">Observable</span>.combineLatest(number1.rx_text, number2.rx_text, number3.rx_text) &#123;</div><div class="line">  (textValue1, textValue2, textValue3) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">  <span class="keyword">return</span> (<span class="type">Int</span>(textValue1) ?? <span class="number">0</span>) + (<span class="type">Int</span>(textValue2) ?? <span class="number">0</span>) + (<span class="type">Int</span>(textValue3) ?? <span class="number">0</span>)</div><div class="line">&#125;</div><div class="line">.<span class="built_in">map</span> &#123; $<span class="number">0</span>.description &#125;</div><div class="line">.bindTo(result.rx_text)</div><div class="line">.addDisposableTo(disposeBag)</div></pre></td></tr></table></figure><p>其中，<code>combineLatest</code> 的效果可以从 <a href="http://rxmarbles.com/#combineLatest" target="_blank" rel="external">http://rxmarbles.com/#combineLatest</a> 这里很直观的看到。这里是将三个被加数的值进行计算，返回它们的和。<code>map</code> 将 Int 值转为 String，<code>bindTo</code> 将 String 值赋给了 result label。最后 <code>addDisposableTo</code> 是内存管理的东西，我们以后再谈。</p><p>从我们的第一个 Demo 中，就可以看出 RxSwift 的强大之处了。如果我们使用 Cocoa 的方式来实现，需要这监听这三个 TextField 的值变化，设置代理，然后进行计算，想想都头大。这里的代码简洁明了，爽！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;To RxSwift:&lt;br&gt;初次见面，请多关照。&lt;/p&gt;
    
    </summary>
    
      <category term="Learn RxSwift The Hard Way" scheme="http://www.futantan.com/categories/Learn-RxSwift-The-Hard-Way/"/>
    
    
      <category term="iOS" scheme="http://www.futantan.com/tags/iOS/"/>
    
      <category term="RxSwift" scheme="http://www.futantan.com/tags/RxSwift/"/>
    
  </entry>
  
  <entry>
    <title>Learn RxSwift The Hard Way - Introduction (一)</title>
    <link href="http://www.futantan.com/2016/05/03/Learn-RxSwift-The-Hard-Way-Introduction/"/>
    <id>http://www.futantan.com/2016/05/03/Learn-RxSwift-The-Hard-Way-Introduction/</id>
    <published>2016-05-03T14:15:52.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7qnang.com1.z0.glb.clouddn.com/16-5-3/38541829.jpg" alt=""><br>从这篇博文开始，我准备开一个新的坑，来记录一下学习 RxSwift 的过程。</p><a id="more"></a><h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><p>RxSwift 和 ReactiveCocoa 很类似，是一个函数式响应式编程（Functional Reactive Programming）框架，<a href="https://www.raywenderlich.com/126522/reactivecocoa-vs-rxswift" target="_blank" rel="external">Ray</a> 出了一篇比较两个框架的文章，如果你不知道该如何选取，可以看看这一篇文章。我选择的原因也很简单，我想使用纯 Swift 😂</p><h2 id="阅读-Documents"><a href="#阅读-Documents" class="headerlink" title="阅读 Documents"></a>阅读 Documents</h2><p><a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="external">RxSwift</a>的 README 文档中有一些简短的介绍，包括其中的链接，都通读一遍，大概对 RxSwift 有了一个大致的了解。</p><p>后面 clone 了 RxSwift 的代码，将其中的 playground 跑一遍，熟悉一下常用的操作符，<br><img src="http://7qnang.com1.z0.glb.clouddn.com/16-5-3/48780598.jpg" alt=""> 我在  <a href="https://github.com/futantan/RxSwiftCheatSheet" target="_blank" rel="external">GitHub</a> 上创建了一个 repo，将会记录一下常用的操作符及其作用（虽然 playground 跑过了，但是用的时候还是想要查看一下用法，可能刚入门还是不太熟悉吧）</p><p>目前 RxSwift 的中文文档和示例代码什么的还不是很健全，我打算使用最笨的方式，读 RxSwift Example 源码，并且自己重写一遍来学习。所以接下来的几篇博客会记录我在重写过程中遇到的问题和解决办法。</p><p>Happy Hacking!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7qnang.com1.z0.glb.clouddn.com/16-5-3/38541829.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;从这篇博文开始，我准备开一个新的坑，来记录一下学习 RxSwift 的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Learn RxSwift The Hard Way" scheme="http://www.futantan.com/categories/Learn-RxSwift-The-Hard-Way/"/>
    
    
      <category term="iOS" scheme="http://www.futantan.com/tags/iOS/"/>
    
      <category term="RxSwift" scheme="http://www.futantan.com/tags/RxSwift/"/>
    
  </entry>
  
  <entry>
    <title>NSTimer 使用锦囊</title>
    <link href="http://www.futantan.com/2016/04/14/NSTimer-tips/"/>
    <id>http://www.futantan.com/2016/04/14/NSTimer-tips/</id>
    <published>2016-04-14T01:36:05.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/14605987599888.jpg" alt=""><br>来看看你是否被 NSTimer 坑过吧 ^_^</p><a id="more"></a><p>完整的示例代码可以可以从 <a href="https://github.com/futantan/PrayerBlogCode" target="_blank" rel="external">这里</a> 获得。</p><p>新建一个工程，再添加一个 VC，SecondViewController 效果图如下：<br><img src="/media/14605514256732-1.jpg" alt="14605514256732"></p><p>可以观察到，最左边，为了方便控制器间的跳转，我们将其嵌入 Navigation Controller 中。第一个 VC 中有一个按钮，<code>next VC</code> 点击之后，会跳转到下一个控制器中；第二个控制器中添加了两个按钮，完整的代码逻辑如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecondViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> timer: <span class="type">NSTimer</span>?</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    </div><div class="line">    <span class="comment">// Do any additional setup after loading the view.</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">deinit</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"in deinit"</span>)</div><div class="line">    timer?.invalidate()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">onFireButtonClicked</span><span class="params">(sender: AnyObject)</span></span> &#123;</div><div class="line">    timer = <span class="type">NSTimer</span>.scheduledTimerWithTimeInterval(<span class="number">2</span>, target: <span class="keyword">self</span>, selector: #selector(sayHello), userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">(timer: NSTimer)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</div><div class="line">    <span class="built_in">print</span>(timer)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">onInvalidateButtonClicked</span><span class="params">(sender: AnyObject)</span></span> &#123;</div><div class="line">    timer?.invalidate()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>timer 是 weak 的</li><li>swift 2.2 中 #selector 的用法</li><li>selector 的函数，也就是 sayHello 是可以接收参数的</li></ol><p>我们来分别讨论。</p><p>对于第一点，NSTimer 的官方文档有如下说明</p><blockquote><p>Timers work in conjunction with run loops. To use a timer effectively, you should be aware of how run loops operate—see NSRunLoop and Threading Programming Guide. Note in particular that run loops maintain strong references to their timers, so you don’t have to maintain your own strong reference to a timer after you have added it to a run loop.</p></blockquote><p>注意，这里说 run loops 将会对 timer 持有强引用，所以我们不需要也不应该在代码中对 timer 使用强引用。</p><p>引用的示意图如下</p><p><img src="/media/14605527787801.jpg" alt=""></p><p>第二点是 swift 2.2 的更新，终于不怕写错函数名了。你可以<a href="http://swifter.tips/selector/" target="_blank" rel="external">从这里</a>了解更多。</p><p>关于第三点，官方文档是这么说的：</p><blockquote><p>The selector should have the following signature: timerFireMethod: (including a colon to indicate that the method takes an argument). The timer passes itself as the argument, thus the method would adopt the following pattern:<br><code>- (void)timerFireMethod:(NSTimer *)timer</code></p></blockquote><p>So far so good!</p><p>但是，大家试试点击 <code>fire</code> 按钮，然后直接用右滑返回手势将 VC 移出，会发现，控制台不停的在输出，VC 的<code>deinit</code>方法并没有调用，我们的 timer 并没有停止！</p><p>原因也是显而易见的，因为 Timer 没有被停止，而 Timer 因为 target action 的关系，有拥有 VC 的强引用，所以一直 VC 一直得不到释放，除非我们手动调用 invalidate 方法。</p><p>为了让 Timer 不持有 VC 的强引用，我们使用一个闭包来替代 target action 的方式：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSTimer</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">scheduledTimerWithTimeInterval</span>(<span class="title">timeInterval</span>: <span class="title">NSTimeInterval</span>, <span class="title">repeats</span>: <span class="title">Bool</span> = <span class="title">false</span>, <span class="title">block</span>: () -&gt; ()) -&gt; <span class="title">NSTimer</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> scheduledTimerWithTimeInterval(timeInterval,</div><div class="line">                                          target: <span class="keyword">self</span>,</div><div class="line">                                          selector: #selector(_executeBlockFromTimer),</div><div class="line">                                          userInfo: block,</div><div class="line">                                          repeats: repeats)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">_executeBlockFromTimer</span>(<span class="title">timer</span>: <span class="title">NSTimer</span>) </span>&#123;</div><div class="line">    <span class="comment">// execute block</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>但是这里出现一个问题，<br><img src="/media/14605550546067.jpg" alt=""></p><p>在 <a href="http://stackoverflow.com/questions/28211973/swift-closure-as-anyobject" target="_blank" rel="external">SOF</a> 上有个解决办法，加个中间层，修改后的代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSTimer</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">FTTimerClosureWraper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> (<span class="keyword">set</span>) <span class="keyword">var</span> timerClosure: () -&gt; ()</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(timerClosure: () -&gt; () ) &#123;</div><div class="line">      <span class="keyword">self</span>.timerClosure = timerClosure</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">scheduledTimerWithTimeInterval</span>(<span class="title">timeInterval</span>: <span class="title">NSTimeInterval</span>, <span class="title">repeats</span>: <span class="title">Bool</span> = <span class="title">false</span>, <span class="title">block</span>: () -&gt; ()) -&gt; <span class="title">NSTimer</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> scheduledTimerWithTimeInterval(timeInterval,</div><div class="line">                                          target: <span class="keyword">self</span>,</div><div class="line">                                          selector: #selector(_executeBlockFromTimer),</div><div class="line">                                          userInfo: <span class="type">FTTimerClosureWraper</span>(timerClosure: block),</div><div class="line">                                          repeats: repeats)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">_executeBlockFromTimer</span>(<span class="title">timer</span>: <span class="title">NSTimer</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> timerClosureWraper = timer.userInfo <span class="keyword">as</span>? <span class="type">FTTimerClosureWraper</span> &#123;</div><div class="line">      timerClosureWraper.timerClosure()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>添加上面的方法之后，我们就可以来使用它啦。将 <code>onFireButtonClicked</code> 方法中的 timer 改为如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">timer = <span class="type">NSTimer</span>.scheduledTimerWithTimeInterval(<span class="number">2</span>, repeats: <span class="literal">true</span>, block: &#123; </div><div class="line">      <span class="built_in">print</span>(<span class="string">"hey, our block"</span>)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure><p> 这时候再使用右滑返回，发现会输出 “in deinit”，证明 VC 已经被正确的释放了。</p><p> 当然，如果你在闭包中捕获了 self，记得使用 weak，例如：</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">timer = <span class="type">NSTimer</span>.scheduledTimerWithTimeInterval(<span class="number">2</span>, repeats: <span class="literal">true</span>, block: &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">  <span class="keyword">self</span>?.test()</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>完整的示例代码可以可以从 <a href="https://github.com/futantan/PrayerBlogCode" target="_blank" rel="external">这里</a> 获得。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/" target="_blank" rel="external">NSTimer</a></li><li><a href="http://blog.callmewhy.com/2015/07/06/weak-timer-in-ios/" target="_blank" rel="external">iOS 中的 NSTimer</a></li><li><a href="http://swifter.tips/retain-cycle/" target="_blank" rel="external">内存管理，WEAK 和 UNOWNED</a></li><li><a href="http://blog.fivelakesstudio.com/2015/11/nstimer-and-blocks-closures.html" target="_blank" rel="external">Swift NSTimer and Blocks (Closures)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/media/14605987599888.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;来看看你是否被 NSTimer 坑过吧 ^_^&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.futantan.com/tags/iOS/"/>
    
      <category term="NSTimer" scheme="http://www.futantan.com/tags/NSTimer/"/>
    
  </entry>
  
  <entry>
    <title>iOS9：预览特定的 UITableViewCell 视图</title>
    <link href="http://www.futantan.com/2016/04/12/peek-pop-view-inside-tableviewcell/"/>
    <id>http://www.futantan.com/2016/04/12/peek-pop-view-inside-tableviewcell/</id>
    <published>2016-04-12T14:40:57.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.natashatherobot.com/peek-pop-view-inside-tableviewcell/" target="_blank" rel="external">原文链接</a><br><a href="http://swift.gg/2016/04/12/peek-pop-view-inside-tableviewcell/" target="_blank" rel="external">SwiftGG 链接</a><br>作者：Natasha<br>原文日期：2016-02-13<br>译者：<a href="http://www.futantan.com/">Prayer</a><br>校对：<a href="http://www.swiftyper.com/" target="_blank" rel="external">小锅</a><br>定稿：<a href="http://codebuild.me/" target="_blank" rel="external">shanks</a></p><a id="more"></a><p>在过去的几天中，我一直忙于开发 <a href="https://github.com/NatashaTheRobot/trySwiftApp" target="_blank" rel="external">try! Swift 会议的官方 App</a>（只剩两周半的时间了，我的天哪😱）！项目中一大亮点就是，我要实现在 app 中使用 3D Touch 来支持演讲者和展示的内容的弹窗预览（Peek &amp; Pop）。幸运的是，<a href="https://twitter.com/allonsykraken" target="_blank" rel="external">@allonsykraken</a>的博文<a href="http://krakendev.io/peek-pop/" target="_blank" rel="external">Peek &amp; Pop Spirit Guide</a>让这个任务完成起来比较简单，为 table view 主视图添加 3D Touch 仅仅花费了几分钟时间就搞定了。</p><center><br><img src="http://swiftgg-main.b0.upaiyun.com/img/peek-pop-view-inside-tableviewcell-1.gif" alt="1.gif"><br></center><p>然而，在 Q&amp;A 模块中遇到了一些问题。我希望在 cell 中特定的视图上——<strong>演讲者的图片</strong>——来使用 peek &amp; pop，而不是像其他模块那样，在整个 cell 上使用。</p><center><br><img src="http://swiftgg-main.b0.upaiyun.com/img/peek-pop-view-inside-tableviewcell-2.gif" alt="2.gif"><br></center><p>因为这个花费了很长时间才解决，所以我想把它记录下来。（在阅读本文之前，请先阅读<a href="http://krakendev.io/peek-pop/" target="_blank" rel="external">Peek &amp; Pop Spirit Guide</a>）</p><h2 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h2><p>为了能够使用 Peak &amp; Pop 功能，我们需要遵循 <strong>UIViewControllerPreviewingDelegate</strong> 协议——这个协议会告知我们用户使用 3D Touch 功能点击了哪儿，并且在这里返回相应的 ViewController 实例。</p><p>因为我的这些图片存在于 cell 中，需要能够区别出用户使用 3D Touch 点击了哪个演讲者的图片，这里我让 cell 遵循 UIViewControllerPreviewingDelegate：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// QASessionTableViewCell</span></div><div class="line"><span class="comment">// QASessionTableViewCell here: https://github.com/NatashaTheRobot/trySwiftApp/blob/master/trySwift/QASessionTableViewCell.swift</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">QASessionSpeakerPopDelegate</span>: <span class="title">class</span> </span>&#123;</div><div class="line">    <span class="comment">// view controller 将遵循该协议，来正确的设置导航视图</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">onCommitViewController</span><span class="params">(viewController: UIViewController)</span></span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">QASessionTableViewCell</span>: <span class="title">UIViewControllerPreviewingDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// UIViewControllerPreviewingDelegate conformance</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext: UIViewControllerPreviewing, viewControllerForLocation location: CGPoint)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> viewsTo3DTouch = [speaker1ImageView, speaker2ImageView, speaker3ImageView]</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (index, view) <span class="keyword">in</span> viewsTo3DTouch.<span class="built_in">enumerate</span>() <span class="keyword">where</span> touchedView(view, location: location) &#123;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> speaker = qaSession?.speakers[index] &#123;</div><div class="line">                <span class="comment">// 返回显示 peek &amp; pop 功能所需要的控制器</span></div><div class="line">                <span class="keyword">return</span> viewControllerForSpeaker(speaker)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext: UIViewControllerPreviewing, commitViewController viewControllerToCommit: UIViewController)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 如果用户选择 pop 出视图，我们需要跳转到相应的视图控制器</span></div><div class="line">        <span class="comment">// 在设置 cell 的时候，delegate 将会被赋值</span></div><div class="line">        delegate?.onCommitViewController(viewControllerToCommit)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// helper methods</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">touchedView</span><span class="params">(view: UIView, location: CGPoint)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">let</span> locationInView = view.convertPoint(location, fromView: contentView)</div><div class="line">        <span class="keyword">return</span> <span class="type">CGRectContainsPoint</span>(view.bounds, locationInView)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">viewControllerForSpeaker</span><span class="params">(speaker: Speaker)</span></span> -&gt; <span class="type">UIViewController</span> &#123;</div><div class="line">        <span class="keyword">let</span> speakerDetailVC = <span class="type">SpeakerDetailViewController</span>()</div><div class="line">        speakerDetailVC.speaker = speaker</div><div class="line">        <span class="keyword">return</span> speakerDetailVC</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// QASessionsTableViewController</span></div><div class="line"><span class="comment">// 全部的代码地址: https://github.com/NatashaTheRobot/trySwiftApp/blob/master/trySwift/QASessionsTableViewController.swift</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">QASessionsTableViewController</span>: <span class="title">QASessionSpeakerPopDelegate</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">// 当视图 pop 出来的时候，view controller 负责处理跳转</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">onCommitViewController</span><span class="params">(viewController: UIViewController)</span></span> &#123;</div><div class="line">        navigationController?.pushViewController(viewController, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>问题在于，想要使用 Peek &amp; Pop 功能，我们需要使用 <strong>registerForPreviewingWithDelegate</strong> 来注册视图和设置代理，但是 registerForPreviewingWithDelegate 是 UIViewController 中的方法，所以我们不能够在 cell 的代码中注册视图！</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>问题的关键在于，我们现在需要 view controller 中 <strong>注册每一个 cell</strong>（而不是像 Schedule 或 Speaker 模块那样直接注册整个 table view）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// QASessionsTableViewController</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QASessionsTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line">    <span class="comment">// 代码有删减</span></div><div class="line">    <span class="comment">// 全部的代码地址: https://github.com/NatashaTheRobot/trySwiftApp/blob/master/trySwift/QASessionsTableViewController.swift</span></div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCellWithIdentifier(<span class="type">String</span>(<span class="type">QASessionTableViewCell</span>), forIndexPath: indexPath) <span class="keyword">as</span>! <span class="type">QASessionTableViewCell</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> qaSession = dataSource.qaSessions[indexPath.section]</div><div class="line">        cell.configure(withQASession: qaSession, delegate: <span class="keyword">self</span>)</div><div class="line">        </div><div class="line">        <span class="comment">// 这是见证奇迹的时刻</span></div><div class="line">        <span class="comment">// 我们需要注册每一个 cell</span></div><div class="line">        <span class="keyword">if</span> traitCollection.forceTouchCapability == .<span class="type">Available</span> &#123;</div><div class="line">            registerForPreviewingWithDelegate(cell, sourceView: cell.contentView)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> cell</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p><a href="https://twitter.com/davedelong/status/698527490428383232" target="_blank" rel="external">@davedelong 指出</a><strong>在 cell 中创建添加到 navigation 中的控制器看起来不是一个明智的选择。</strong> 我完全同意他的观点！但是写代码的时候在 deadline 的压迫下，我没有想到更好的实现方式。幸运的是，<a href="https://twitter.com/NatashaTheRobot/status/698530746449817600" target="_blank" rel="external">@davedelong 提出了一种更好的解决办法</a>，通过这种方式，可以让这些代码保留在应有的 view controller 中！</p><p>下面的代码经过了一些重构，希望你能够 get 到其中的精髓！</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// QASessionsTableViewController</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QASessionsTableViewController</span>: <span class="title">UITableViewController</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> dataSource: <span class="type">QASessionDataSourceProtocol</span>!</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// other setup here</span></div><div class="line"> </div><div class="line">        <span class="comment">// 只需要为 force touch 注册整个 table view</span></div><div class="line">        <span class="comment">// 不需要分别注册单个的 cell</span></div><div class="line">        <span class="keyword">if</span> traitCollection.forceTouchCapability == .<span class="type">Available</span> &#123;</div><div class="line">            registerForPreviewingWithDelegate(<span class="keyword">self</span>, sourceView: tableView)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// 代码有删减</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// MARK: Force Touch on Speaker Images</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">QASessionsTableViewController</span>: <span class="title">UIViewControllerPreviewingDelegate</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext: UIViewControllerPreviewing, viewControllerForLocation location: CGPoint)</span></span> -&gt; <span class="type">UIViewController</span>? &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> indexPath = tableView.indexPathForRowAtPoint(location) &#123;</div><div class="line"> </div><div class="line">            <span class="keyword">let</span> cell = tableView.cellForRowAtIndexPath(indexPath) <span class="keyword">as</span>! <span class="type">QASessionTableViewCell</span></div><div class="line">            </div><div class="line">            <span class="keyword">let</span> viewsTo3DTouch = [cell.speaker1ImageView, cell.speaker2ImageView, cell.speaker3ImageView]</div><div class="line">            <span class="keyword">for</span> (index, view) <span class="keyword">in</span> viewsTo3DTouch.<span class="built_in">enumerate</span>() <span class="keyword">where</span> touchedView(view, location: location) &#123;</div><div class="line">                </div><div class="line">                <span class="comment">// 只将图片清晰地显示，其他内容将会变得模糊</span></div><div class="line">                <span class="comment">// 需要将 image view 的坐标转化为在 table view 坐标系中的坐标 </span></div><div class="line">                <span class="comment">// 如果你有更好的坐标转换方式，请告诉我！</span></div><div class="line">                <span class="keyword">let</span> viewRectInTableView = tableView.convertRect(view.frame, fromCoordinateSpace: view.superview!)</div><div class="line">                previewingContext.sourceRect = viewRectInTableView</div><div class="line">                </div><div class="line">                <span class="comment">// 设置需要显示的 view controller</span></div><div class="line">                <span class="keyword">let</span> qaSession = dataSource.qaSessions[indexPath.section]</div><div class="line">                <span class="keyword">let</span> speaker = qaSession.speakers[index]</div><div class="line">                <span class="keyword">return</span> viewControllerForSpeaker(speaker)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">previewingContext</span><span class="params">(previewingContext: UIViewControllerPreviewing, commitViewController viewControllerToCommit: UIViewController)</span></span> &#123;</div><div class="line">        navigationController?.pushViewController(viewControllerToCommit, animated: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">touchedView</span><span class="params">(view: UIView, location: CGPoint)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">let</span> locationInView = view.convertPoint(location, fromView: tableView)</div><div class="line">        <span class="keyword">return</span> <span class="type">CGRectContainsPoint</span>(view.bounds, locationInView)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">viewControllerForSpeaker</span><span class="params">(speaker: Speaker)</span></span> -&gt; <span class="type">UIViewController</span> &#123;</div><div class="line">        <span class="keyword">let</span> speakerDetailVC = <span class="type">SpeakerDetailViewController</span>()</div><div class="line">        speakerDetailVC.speaker = speaker</div><div class="line">        <span class="keyword">return</span> speakerDetailVC</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面是效果图——请注意，选中的图片之外的内容才会变得模糊！</p><center><br><img src="http://swiftgg-main.b0.upaiyun.com/img/peek-pop-view-inside-tableviewcell-3.gif" alt="3.gif"><br></center><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>所以在某个特定的视图上使用 3D Touch 功能并非难事！一般来说，实现 3D Touch 非常简单和有趣。我强烈推荐您在 app 中添加 3D Touch 的功能。</p><center><br><img src="https://www.natashatherobot.com/wp-content/uploads/peekpop.jpg" alt="peak and pop all the things"><br></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.natashatherobot.com/peek-pop-view-inside-tableviewcell/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://swift.gg/2016/04/12/peek-pop-view-inside-tableviewcell/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SwiftGG 链接&lt;/a&gt;&lt;br&gt;作者：Natasha&lt;br&gt;原文日期：2016-02-13&lt;br&gt;译者：&lt;a href=&quot;http://www.futantan.com/&quot;&gt;Prayer&lt;/a&gt;&lt;br&gt;校对：&lt;a href=&quot;http://www.swiftyper.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;小锅&lt;/a&gt;&lt;br&gt;定稿：&lt;a href=&quot;http://codebuild.me/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shanks&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://www.futantan.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://www.futantan.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>铲屎官翻身记（Slack bot）</title>
    <link href="http://www.futantan.com/2016/04/06/create-a-slack-bot/"/>
    <id>http://www.futantan.com/2016/04/06/create-a-slack-bot/</id>
    <published>2016-04-06T02:11:30.000Z</published>
    <updated>2017-10-28T04:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/14599097880604.jpg" alt=""></p><p>今天来做一回翻身的铲屎官，使用 Slack bot 来简化我们的工作流程。（主要是因为我的 bot 以 miao 命名，所以 😂 ）</p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://hubot.github.com/" target="_blank" rel="external">Hubot</a> 是一个机器人，可以帮助我们完成很多事情，一个懒癌患者， 宁愿花 3 个小时写代码，也不愿意花 2 个小时完成重复的工作，所以，如果你有懒癌的话，不妨试试 Hubot。这里我将与 Slack 结合使用。</p><p>你可以从<a href="https://hubot.github.com/docs/" target="_blank" rel="external">这里</a>查看 Hubot 的使用说明。如果同我一样，是使用 Slack 的话，可以在<a href="https://github.com/slackhq/hubot-slack" target="_blank" rel="external">这里</a> 查看如何使用 hubot－slack。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><a href="https://github.com/slackhq/hubot-slack" target="_blank" rel="external">Readme 文件</a> 已经写得很清楚了，这里也记录一下吧。</p><p>```bash<br>npm install -g hubot coffee-script yo generator-hubot<br>mkdir -p /path/to/hubot<br>cd /path/to/hubot<br>yo hubot<br>npm install hubot-slack –save<br>```</p><p>上述代码正确执行完毕之后，你的小机器人就可以正常运行了。你可以使用一下命令在本地进行测试：</p><p>```bash<br>HUBOT_SLACK_TOKEN=xxxx-xxxx-xxxx-xxxx-xxxx ./bin/hubot –adapter slack<br>```<br>注意 <code>HUBOT_SLACK_TOKEN＝</code>后面的值需要求改为你的 token。你需要在 <code>Slack-&gt;Browse apps-&gt;Hubot</code> 中新建一个，然后在这里取得 token 的值。</p><p>OK，我们会在下一次介绍如何调教我们的 bot，下次见。</p><p>Happy Hacking!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/media/14599097880604.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天来做一回翻身的铲屎官，使用 Slack bot 来简化我们的工作流程。（主要是因为我的 bot 以 miao 命名，所以 😂 ）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Slack" scheme="http://www.futantan.com/tags/Slack/"/>
    
  </entry>
  
  <entry>
    <title>使用 IB 填坑记</title>
    <link href="http://www.futantan.com/2016/04/05/tips-for-IB/"/>
    <id>http://www.futantan.com/2016/04/05/tips-for-IB/</id>
    <published>2016-04-05T13:23:12.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在自定义控件的时候，我们经常需要不断的运行程序来查看控件效果是否符合要求，但是每次编译运行都很浪费时间，所以我特别喜欢使用 IB 来预览效果。这篇博文主要记录两点使用注意事项。</p><a id="more"></a><h2 id="IBInspectable"><a href="#IBInspectable" class="headerlink" title="IBInspectable"></a>IBInspectable</h2><p>在使用<code>@IBInspectable</code>来标注属性的时候，一定要显式的指明变量类型，而不是用 type infer。如果不显式的指定，IB 将不能够识别这个属性。例如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bgColor: <span class="type">UIColor</span> = <span class="type">UIColor</span>.grayColor() &#123;</div><div class="line">  <span class="keyword">didSet</span> &#123;</div><div class="line">    bgLayer.strokeColor = bgColor.<span class="type">CGColor</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果没有显示的指定变量类型为 <code>UIColor</code> IB 中将不会有这个属性的选项。</p><h2 id="Runtime-Attributes"><a href="#Runtime-Attributes" class="headerlink" title="Runtime Attributes"></a>Runtime Attributes</h2><p>你可以参考我的<a href="http://www.futantan.com/2015/09/17/adding-user-defined-runtime-attrubute/">这篇文章</a>来看看 运行时属性 的功能。<br>其实，我们使用 <code>@IBInspectable</code> 的时候，其原理也是使用 Runtime Attributes 来进行属性的赋值：<br><img src="/media/14598631079898.jpg" alt=""></p><p>这里需要注意的是，如果我们将其中的 <code>curValue</code> 从 <code>@IBInspectable</code> 中去掉，记得一定要回到上图这里，将这里的 <code>curValue</code> 手动删除！ Xcode 目前还没这么智能，如果运行时发现有些奇怪的赋值现象，很有可能坑在这里。</p><p>希望这两个坑能够节省你 10 分钟的 debug 时间 ^_^<br>Happy Hacking!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在自定义控件的时候，我们经常需要不断的运行程序来查看控件效果是否符合要求，但是每次编译运行都很浪费时间，所以我特别喜欢使用 IB 来预览效果。这篇博文主要记录两点使用注意事项。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.futantan.com/tags/iOS/"/>
    
      <category term="Interface Builder" scheme="http://www.futantan.com/tags/Interface-Builder/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程之 reduce</title>
    <link href="http://www.futantan.com/2016/04/01/functional-programming-reduce/"/>
    <id>http://www.futantan.com/2016/04/01/functional-programming-reduce/</id>
    <published>2016-04-01T08:13:23.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>与 map 那篇文章类似，我们先来看需求，如果我们需要对一个数组求和，代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(xs: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">var</span> result: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> xs &#123;</div><div class="line">    result += x</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面还是来封装变化点。</p><a id="more"></a><p>这里的变化点与之前的 map 和 filter 相比多了一些，除了操作逻辑，类型信息之外，还需要提供一个初始值。封装之后的代码如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">reduce</span>&lt;T&gt;<span class="params">(initial: T, combine: <span class="params">(T, Element)</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123;</div><div class="line">    <span class="keyword">var</span> result = initial</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> &#123;</div><div class="line">      result = combine(result, x)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以像下面这样使用：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; result, element <span class="keyword">in</span></div><div class="line">  <span class="keyword">return</span> result + element</div><div class="line">&#125;</div><div class="line"><span class="comment">// 或者</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +)</div></pre></td></tr></table></figure><p>在 <code>reduce</code> 的定义中，我们提供了两个参数，一个是 <code>initial</code> 提供初始值，同时提供了相关的类型信息，另一个是 <code>combine</code> 函数，将进行相应的转换逻辑。</p><h2 id="使用-reduce-实现-map-和-filter"><a href="#使用-reduce-实现-map-和-filter" class="headerlink" title="使用 reduce 实现 map 和 filter"></a>使用 reduce 实现 map 和 filter</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">mapUsingReduce</span>&lt;T&gt;<span class="params">(transform: Element -&gt; T)</span></span> -&gt; [<span class="type">T</span>] &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">reduce</span>([]) &#123; (result, x) -&gt; [<span class="type">T</span>] <span class="keyword">in</span></div><div class="line">      <span class="keyword">return</span> result + [transform(x)]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">filterUsingReduce</span><span class="params">(includeElement: Element -&gt; Bool)</span></span> -&gt; [<span class="type">Element</span>] &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">reduce</span>([]) &#123; result, x <span class="keyword">in</span></div><div class="line">      <span class="keyword">return</span> includeElement(x) ? result + [x] : result</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码逻辑比较简单明了，就不多说了。需要注意的是，虽然我们可以使用 reduce 来实现 map 和 filter 的功能，但是可以观察到，这里面的性能是不高的，会在运行时造成很多份的数据 copy， 所以，还是使用系统自带的函数吧，源码和编译器都帮我们做了很多的优化。^_^</p><blockquote><p>参考资料 objc Functional Swift</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与 map 那篇文章类似，我们先来看需求，如果我们需要对一个数组求和，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(xs: [Int])&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xs &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    result += x&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面还是来封装变化点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="函数式编程" scheme="http://www.futantan.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程之 filter</title>
    <link href="http://www.futantan.com/2016/04/01/functional-programming-filter/"/>
    <id>http://www.futantan.com/2016/04/01/functional-programming-filter/</id>
    <published>2016-04-01T03:13:23.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们先来看需求。从指定的数组中过滤出符合条件的元素，我们先来看简单的情形：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> exampleFiles = [<span class="string">"README.md"</span>, <span class="string">"HelloWorld.swift"</span>, <span class="string">"FlappyBird.swift"</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSwiftFiles</span><span class="params">(files: [String])</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">  <span class="keyword">var</span> result: [<span class="type">String</span>] = []</div><div class="line">  <span class="keyword">for</span> file <span class="keyword">in</span> files &#123;</div><div class="line">    <span class="keyword">if</span> file.hasSuffix(<span class="string">".swift"</span>) &#123;</div><div class="line">      result.append(file)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p>与上一篇博客的思路一样，我们来封装变化点，首先是过滤的逻辑，其次是类型信息，最后将其放在 Array 的 extension 中：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">filter</span><span class="params">(includeElement: Element -&gt; Bool)</span></span> -&gt; [<span class="type">Element</span>] &#123;</div><div class="line">    <span class="keyword">var</span> result: [<span class="type">Element</span>] = []</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> <span class="keyword">where</span> includeElement(x) &#123;</div><div class="line">      result.append(x)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码的思路非常清晰，于是我们可以像下面一样使用 filter 方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">filter</span>&#123; $<span class="number">0</span> &gt; <span class="number">2</span>&#125;</div></pre></td></tr></table></figure><p>当然，Swift 标准库中提供了 filter 的实现，定义在 <code>SequenceType</code> 协议中。这里我们只是来自己实现一次。</p><blockquote><p>参考资料 objc Functional Swift</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们先来看需求。从指定的数组中过滤出符合条件的元素，我们先来看简单的情形：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; exampleFiles = [&lt;span class=&quot;string&quot;&gt;&quot;README.md&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;HelloWorld.swift&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;FlappyBird.swift&quot;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSwiftFiles&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(files: [String])&lt;/span&gt;&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;] &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result: [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;] = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; files &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; file.hasSuffix(&lt;span class=&quot;string&quot;&gt;&quot;.swift&quot;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      result.append(file)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="函数式编程" scheme="http://www.futantan.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程之 map</title>
    <link href="http://www.futantan.com/2016/04/01/functional-programming-map/"/>
    <id>http://www.futantan.com/2016/04/01/functional-programming-map/</id>
    <published>2016-04-01T03:07:13.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们常常需要对一个数组中的每一个元素进行相应的转换，例如，下面这个函数将数组中的每个元素增加 1.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">incrementArray</span><span class="params">(xs: [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">  <span class="keyword">var</span> result: [<span class="type">Int</span>] = []</div><div class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> xs &#123;</div><div class="line">    result.append(x + <span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p>然而仔细考虑之后我们会发现，如果有其他的转化操作，就需要再重新写一个函数，而其他的代码逻辑都是相同的，所以，这里我们可以将转化部分的逻辑抽取成一个闭包，如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomeThingOnArray</span><span class="params">(xs: [Int], transform: Int -&gt; Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">  <span class="keyword">var</span> result: [<span class="type">Int</span>] = []</div><div class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> xs &#123;</div><div class="line">    result.append(transform(x))</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样，我们就将会变化的代码抽取出来了，例如将所有元素乘 2:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">doSomeThingOnArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123; (element) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">  <span class="keyword">return</span> element * <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然而代码写到这里，并不是一个很好的版本，因为这里的类型的信息是硬编码的，所以，我们来解决这个问题，并且将代码放到 Array 的 extension 中：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;T&gt;<span class="params">(transform: Element -&gt; T)</span></span> -&gt; [<span class="type">T</span>] &#123;</div><div class="line">    <span class="keyword">var</span> result: [<span class="type">T</span>] = []</div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> &#123;</div><div class="line">      result.append(transform(x))</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>于是我们就可以像下面这样使用我们自己定义的 map：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">map</span> &#123; (x) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">  <span class="keyword">return</span> x + <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当然，Swift 标准库中提供了 map 的实现，定义在 <code>SequenceType</code> 协议中。</p><blockquote><p>参考资料 objc Functional Swift</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们常常需要对一个数组中的每一个元素进行相应的转换，例如，下面这个函数将数组中的每个元素增加 1.&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;incrementArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(xs: [Int])&lt;/span&gt;&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result: [&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;] = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xs &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    result.append(x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="函数式编程" scheme="http://www.futantan.com/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2016 一季度总结</title>
    <link href="http://www.futantan.com/2016/03/31/2016-first-quarter/"/>
    <id>http://www.futantan.com/2016/03/31/2016-first-quarter/</id>
    <published>2016-03-31T07:37:36.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/14594143449846.jpg" alt=""></p><p>在我写下这些文字的时候，成都大概从冬天直接入夏了。最公平也是最残酷的事情就是时间了吧。今天看书的时候注意到一个单词，Time flies，时光飞逝，我更愿意把它理解为『时间果蝇』，也算是一件有趣的事吧。</p><a id="more"></a><p>这篇博文的目的是为了记流水账，写写这一季度我做了什么，这是我最讨厌的文章类型，所以我打算扯扯淡，各位看官，莞尔一笑也就作罢了。</p><h2 id="故事的开始是别离"><a href="#故事的开始是别离" class="headerlink" title="故事的开始是别离"></a>故事的开始是别离</h2><p>The most hard time it had ever been.</p><p>我把这一段，全部都删掉了。</p><h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><p>感谢每周都要去市里，让我有了很多的时间可以阅读，在地铁上，公交上，除了观察别人，最有意思的就是读书了。很难得的，今年少有的看了几本非技术书，也算是挺幸运的吧。</p><h3 id="《乖，摸摸头》"><a href="#《乖，摸摸头》" class="headerlink" title="《乖，摸摸头》"></a>《乖，摸摸头》</h3><p>这是别人推荐给我的，文章不长，我大概可以一个下午读完，可是同另一本书一样，我读了很长时间，因为，真的不忍去读。</p><p><img src="/media/14594114252719.jpg" alt=""></p><p>你会觉得，啊，为什么他们活得这么洒脱，活得这么自由，活得这么像个无拘无束的精灵。每读一个故事，我都会把手机丢在一边，怅然若失，生怕别人发现我活得这么贫瘠，这么苍白。读完这本书之后，我也常常在想，到底什么是生活，和身边的几个朋友也有所讨论，我不觉得谈论生命的意义是一个很不正常的事情，我恰恰为自己时常思考感到庆幸，虽然我知道生在这个时代，会有强大的时代烙印，但是，我总是要想一想，努力的想一想，努力的思考一下，博上帝一笑吧。</p><h3 id="《皮囊》"><a href="#《皮囊》" class="headerlink" title="《皮囊》"></a>《皮囊》</h3><p><img src="/media/14594117787631.jpg" alt=""></p><p>这也是一本不忍去读的书，作者把人性看得太透，却从一个旁观者的角度，不哭，不闹，让你看到真实的一切，没有血淋淋，却残忍的不忍去读。书中有很多故事，其实都能在自己的身上找到影子吧，或者这也是本书最残酷的事情，他把这原本你没意识到的一切，撕碎了给你看，喏，这就是你的生活。</p><h3 id="《微信帝国》"><a href="#《微信帝国》" class="headerlink" title="《微信帝国》"></a>《微信帝国》</h3><p>做产品的都应该看看这本书，性与暴力，强烈推荐。<br><img src="/media/14594127218197.jpg" alt=""></p><h3 id="《代码之髓》"><a href="#《代码之髓》" class="headerlink" title="《代码之髓》"></a>《代码之髓》</h3><p>这应该是今年我在地铁上读完的第一本书，作者是名日本人，我发觉日本人写的书的视角都比较大，不像国内的书，大部分都教你如何使用 API，顺便推荐一下 Ruby 之父的 《代码的未来》</p><p><img src="/media/14594122979372.jpg" alt=""></p><p>我喜欢看着一类的书，会帮助你思考，为什么会这样。我们每天都在用的编程语言，他的设计哲学和底层原理，如果你对这个该兴趣，你可以看看，这本书比较浅显，可能大部分的问题你都思考过，不过他帮你形成了系统，总结了一下，也算是非常不错的。</p><hr><p>还有好多在读的书，就不列出来了，因为不算是这个季度读完的，也算是对自己的鞭策吧（没读完出来吹什么牛逼…）『多看』上的统计，我大概看了 400 多本书，读完的也就 40 多本，很多书可能看到一般不是很感兴趣就丢掉了。如果你有什么好的书推荐，我相信你总会在我的网站找到我的联系方式的。</p><h2 id="荒唐言"><a href="#荒唐言" class="headerlink" title="荒唐言"></a>荒唐言</h2><p>读了几本书，经历了一些人和事，又过去一个季度。回头看看，这一个季度过得还是挺平淡的，无非就是读书，喜怒哀乐。最近一个月在忙着看书找实习，大概两周没怎么写代码了，最近再看 Functional Programming，希望能在清明前刷完。</p><p>这是我的第一季度，希望下次写的时候，看看这篇文章，“瞧，傻哔，你最近都干了些什么！”</p><p>如果你看到这儿，你可能也是够无聊的，不妨联系我，找我聊聊天吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/media/14594143449846.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在我写下这些文字的时候，成都大概从冬天直接入夏了。最公平也是最残酷的事情就是时间了吧。今天看书的时候注意到一个单词，Time flies，时光飞逝，我更愿意把它理解为『时间果蝇』，也算是一件有趣的事吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="荒唐言" scheme="http://www.futantan.com/tags/%E8%8D%92%E5%94%90%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Blocks 小测验</title>
    <link href="http://www.futantan.com/2016/03/10/objective-c-blocks-quiz/"/>
    <id>http://www.futantan.com/2016/03/10/objective-c-blocks-quiz/</id>
    <published>2016-03-10T12:05:07.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/media/14576119117357.jpg" alt=""></p><p>图题是一个很有意思的网站的截图，有人专门申请了一个域名：<a href="http://fuckingblocksyntax.com/" target="_blank" rel="external">fuckingblocksyntax</a> 来表示对 OC 中 block 奇特写法的不满，当然题图无关，今天看到一个有意思的 block 测试网站，记录一下。</p><p>你可以在这里来先测试一下：<br><a href="http://blog.parse.com/learn/engineering/objective-c-blocks-quiz/" target="_blank" rel="external">Objective-C Blocks Quiz</a></p><a id="more"></a><h2 id="Example-A"><a href="#Example-A" class="headerlink" title="Example A"></a>Example A</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">void exampleA() &#123;</div><div class="line">  char a = &apos;A&apos;;</div><div class="line">  ^&#123;</div><div class="line">    printf(&quot;%cn&quot;, a);</div><div class="line">  &#125;();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>解释：<br>这段代码在 MRC 和 ARC 的情况下都能正确执行。<br>因为 <code>exampleA</code> 的函数栈，在 block 执行完之前，并不会 pop，所以，无论函数中的 block 是在 stack 或是 heap 中，都能够被正确执行。</p><h2 id="Example-B"><a href="#Example-B" class="headerlink" title="Example B"></a>Example B</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">void exampleB_addBlockToArray(NSMutableArray *array) &#123;</div><div class="line">  char b = &apos;B&apos;;</div><div class="line">  [array addObject:^&#123;</div><div class="line">    printf(&quot;%cn&quot;, b);</div><div class="line">  &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">void exampleB() &#123;</div><div class="line">  NSMutableArray *array = [NSMutableArray array];</div><div class="line">  exampleB_addBlockToArray(array);</div><div class="line">  void (^block)() = [array objectAtIndex:0];</div><div class="line">  block();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>解释：<br>这段代码只有在 ARC 的情况下才能正确执行。<br>在 MRC 的情况下，block 分配在栈上，在 <code>exampleB_addBlockToArray</code> 返回之后，函数栈被弹出，这个 block 的地址就不再合法了。<br>在 ARC 的情况下，block 将会被拷贝到堆中，可以合法使用。</p><h2 id="Example-C"><a href="#Example-C" class="headerlink" title="Example C"></a>Example C</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">void exampleC_addBlockToArray(NSMutableArray *array) &#123;</div><div class="line">  [array addObject:^&#123;</div><div class="line">    printf(&quot;Cn&quot;);</div><div class="line">  &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">void exampleC() &#123;</div><div class="line">  NSMutableArray *array = [NSMutableArray array];</div><div class="line">  exampleC_addBlockToArray(array);</div><div class="line">  void (^block)() = [array objectAtIndex:0];</div><div class="line">  block();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>解释：<br>这段代码在 MRC 和 ARC 的情况下都能正确执行。<br>因为 <code>exampleC_addBlockToArray</code> 中的 block 并没有捕获任何变量，是一个 <code>NSGlobalBlock</code>，既不在堆中，也不在栈上，所以可以像普通的 C 函数一样访问，不会存在任何问题。</p><h2 id="Exapmle-D"><a href="#Exapmle-D" class="headerlink" title="Exapmle D"></a>Exapmle D</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">typedef void (^dBlock)();</div><div class="line"></div><div class="line">dBlock exampleD_getBlock() &#123;</div><div class="line">  char d = &apos;D&apos;;</div><div class="line">  return ^&#123;</div><div class="line">    printf(&quot;%cn&quot;, d);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void exampleD() &#123;</div><div class="line">  exampleD_getBlock()();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>解释：<br>这段代码只有在 ARC 的情况下才能正确执行。<br>block 分配在栈上，如果是 ARC，将会被拷贝到堆上。而 MRC 的情况下，函数执行结束，这个地址就不存在了，而且编译器会报错：<code>error: returning block that lives on the local stack</code></p><h2 id="Example-E"><a href="#Example-E" class="headerlink" title="Example E"></a>Example E</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">typedef void (^eBlock)();</div><div class="line"></div><div class="line">eBlock exampleE_getBlock() &#123;</div><div class="line">  char e = &apos;E&apos;;</div><div class="line">  void (^block)() = ^&#123;</div><div class="line">    printf(&quot;%cn&quot;, e);</div><div class="line">  &#125;;</div><div class="line">  return block;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void exampleE() &#123;</div><div class="line">  eBlock block = exampleE_getBlock();</div><div class="line">  block();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>解释：<br>这段代码只有在 ARC 的情况下才能正确执行。<br>和 <code>Exapmle D</code> 的情况很类似，只不过这儿编译器在 MRC 情况下不会报错。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><code>ARC</code> 大法好！<br>如果不使用 ARC（我觉得现在应该没有不用 ARC 的吧…）需要在传递 block 的时候，使用 <code>block = [[block copy] autorelease]</code>，这样可以让 block 拷贝到堆中。</p><p>声明：本文内容并非原创，而是大部分引用自上面所说的<a href="http://blog.parse.com/learn/engineering/objective-c-blocks-quiz/" target="_blank" rel="external">网站</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/media/14576119117357.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;图题是一个很有意思的网站的截图，有人专门申请了一个域名：&lt;a href=&quot;http://fuckingblocksyntax.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fuckingblocksyntax&lt;/a&gt; 来表示对 OC 中 block 奇特写法的不满，当然题图无关，今天看到一个有意思的 block 测试网站，记录一下。&lt;/p&gt;
&lt;p&gt;你可以在这里来先测试一下：&lt;br&gt;&lt;a href=&quot;http://blog.parse.com/learn/engineering/objective-c-blocks-quiz/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C Blocks Quiz&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-c" scheme="http://www.futantan.com/tags/Objective-c/"/>
    
  </entry>
  
  <entry>
    <title>Realm 入坑系列之 String 数组</title>
    <link href="http://www.futantan.com/2016/03/06/fuck-realm-string-array/"/>
    <id>http://www.futantan.com/2016/03/06/fuck-realm-string-array/</id>
    <published>2016-03-06T14:17:48.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Realm 中为了建立一对多的数据模型关系，需要使用 List。List 在使用上和 Array 非常类似，然而，当我们需要表示 Swift 中的基本类型的时候，坑就来了…</p><a id="more"></a><p>假设我们从服务端获取了一个字段 <code>tags</code>，这个字段是一个 String 类型的数组，我们的第一反应是这样来建立数据模型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let tags = List&lt;String&gt;()</div></pre></td></tr></table></figure><p>然而编译器会无情打脸</p><p><img src="/media/14572748135230.jpg" alt=""><br>在 Realm 中，数据类型必须继承自 <code>Object</code>，这一点都不酷，真的…</p><p>在查看了很久官方文档之后，得出一个结论，这种写法确实是不行的。于是你必须在为了表示 String 类型，而将 String 在包裹在一个 继承自 Object 的类中，向如下的写法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealmString</span>: <span class="title">Object</span> </span>&#123;</div><div class="line">  <span class="keyword">dynamic</span> <span class="keyword">var</span> stringValue = <span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>确实这是目前唯一的解决办法，如果你有更好的解决方案，可以留言。</p><p>当然，在我们无法改变结果的时候，就让我们来完善一下过程，将上面的变量声明代码改为：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> _backingTags = <span class="type">List</span>&lt;<span class="type">RealmString</span>&gt;()</div><div class="line"><span class="keyword">var</span> tags: [<span class="type">String</span>] &#123;</div><div class="line">  <span class="keyword">get</span> &#123;</div><div class="line">    <span class="keyword">return</span> _backingTags.<span class="built_in">map</span> &#123; $<span class="number">0</span>.stringValue &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">set</span> &#123;</div><div class="line">    _backingTags.removeAll()</div><div class="line">    _backingTags.appendContentsOf(newValue.<span class="built_in">map</span>(&#123; <span class="type">RealmString</span>(value: [$<span class="number">0</span>]) &#125;))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面我们定义了一个计算属性，通过 _backingTags 来作为实际的存储值，然后使用 tags 作为使用的接口，稍微优雅了一点。</p><p>enjoy~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Realm 中为了建立一对多的数据模型关系，需要使用 List。List 在使用上和 Array 非常类似，然而，当我们需要表示 Swift 中的基本类型的时候，坑就来了…&lt;/p&gt;
    
    </summary>
    
      <category term="Realm 入坑系列" scheme="http://www.futantan.com/categories/Realm-%E5%85%A5%E5%9D%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Realm" scheme="http://www.futantan.com/tags/Realm/"/>
    
  </entry>
  
  <entry>
    <title>iOS 中日期的格式化操作</title>
    <link href="http://www.futantan.com/2016/03/05/dateformat-in-iOS/"/>
    <id>http://www.futantan.com/2016/03/05/dateformat-in-iOS/</id>
    <published>2016-03-05T12:01:07.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>更新： 收藏这个网址 <a href="http://nsdateformatter.com/" target="_blank" rel="external">nsdateformatter</a>，这篇博客不用看了！</p></blockquote><p>在和服务器交互数据的时候，使用到 NSDate，无论是将服务器返回的 String 类型的日期字符串转为 NSDate，还是 NSDate 到 String 类型的逆向处理，都是经常要做的事情，这里主要是和大家分享一个特别棒的网站。</p><a id="more"></a><h2 id="String-To-Date"><a href="#String-To-Date" class="headerlink" title="String To Date"></a>String To Date</h2><p>来看一个具体的场景，比如，服务器端给我们返回的日期字段为 <code>2016-03-05T11:35:05Z</code>，String 类型，我们使用下面的做法来处理：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> stringToDateFormatter = <span class="type">NSDateFormatter</span>()</div><div class="line">stringToDateFormatter.dateFormat = <span class="string">"yyyy-MM-dd'T'kk:mm:ssZ"</span></div><div class="line">stringToDateFormatter.timeZone = <span class="type">NSTimeZone</span>.localTimeZone()</div><div class="line"><span class="keyword">let</span> date = stringToDateFormatter.dateFromString(dateString)</div></pre></td></tr></table></figure><p>其实很简单，关键在于 “yyyy-MM-dd’T’kk:mm:ssZ”，如何快速正确的写出这个 format 字符串呢，给大家推荐一个网站 <a href="http://userguide.icu-project.org/formatparse/datetime" target="_blank" rel="external">Formatting Dates and Times</a></p><p><img src="/media/14571797012126.jpg" alt=""></p><p>amazing！再也不用担心不会写日期格式化字符串了！</p><h2 id="Date-To-String"><a href="#Date-To-String" class="headerlink" title="Date To String"></a>Date To String</h2><p>现在我们来将 NSDate 转为 想要的 String 类型，比如上面的时间，我想要的输出是 “Mar 5, 2016”<br>可以使用如下代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dateToStringFormatter = <span class="type">NSDateFormatter</span>()</div><div class="line">dateToStringFormatter.dateFormat = <span class="string">"MMM d, yyyy"</span> <span class="comment">//Mar 5, 2016</span></div><div class="line"><span class="built_in">print</span>(dateToStringFormatter.stringFromDate(date!))</div></pre></td></tr></table></figure><p>希望看完这篇博文，在以后遇到类似情况的时候，能够节省下您 5 分钟的搜索时间。<br>enjoy~</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;更新： 收藏这个网址 &lt;a href=&quot;http://nsdateformatter.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nsdateformatter&lt;/a&gt;，这篇博客不用看了！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在和服务器交互数据的时候，使用到 NSDate，无论是将服务器返回的 String 类型的日期字符串转为 NSDate，还是 NSDate 到 String 类型的逆向处理，都是经常要做的事情，这里主要是和大家分享一个特别棒的网站。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.futantan.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Realm 入坑系列之配置</title>
    <link href="http://www.futantan.com/2016/03/04/fuck-realm-config/"/>
    <id>http://www.futantan.com/2016/03/04/fuck-realm-config/</id>
    <published>2016-03-04T10:35:04.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近准备着手跳进 <a href="https://realm.io/cn/" target="_blank" rel="external">Realm</a> 的坑，如果你对 Realm 还不熟悉，可以看看我之前的一篇<a href="http://www.futantan.com/2015/10/29/Building-a-ToDo-A-Realm-and-Swift/">译文</a>。这里我们聊一聊，Realm 在使用之前，配置上的坑。（iOS 平台）</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>目前，我使用的是 Xcode 7.2，Realm Swift 的最新版本为 0.98.1。</p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>开始填坑，<strong>注意</strong> ：目前不支持 CocoaPods 1.0.0 版本，请一定使用 ~&gt; 0.39.0 的 pod 版本，如果你已经升级到 1.0 以后的版本，可以试试 <code>pod _0.39_ install</code> 来安装依赖，具体的步骤，<a href="https://realm.io/docs/swift/latest/" target="_blank" rel="external">官网</a>都有说明，我就不多说了。</p><p>当然，这个<strong>坑具有实效性</strong>，请以官网说明为准。</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>默认的数据库存放位置为 你的应用文件夹下的 <code>Documents</code> 目录，默认会生成一个 <code>default.realm</code> 的数据库文件，当然，如果你找不到模拟器的应用目录的话，可以跑一下下面的代码，来查看路径：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="type">Realm</span>.<span class="type">Configuration</span>.defaultConfiguration.path!)</div></pre></td></tr></table></figure><p>祝大家玩儿的愉快！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近准备着手跳进 &lt;a href=&quot;https://realm.io/cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Realm&lt;/a&gt; 的坑，如果你对 Realm 还不熟悉，可以看看我之前的一篇&lt;a href=&quot;http://www.futantan.com/2015/10/29/Building-a-ToDo-A-Realm-and-Swift/&quot;&gt;译文&lt;/a&gt;。这里我们聊一聊，Realm 在使用之前，配置上的坑。（iOS 平台）&lt;/p&gt;
    
    </summary>
    
      <category term="Realm 入坑系列" scheme="http://www.futantan.com/categories/Realm-%E5%85%A5%E5%9D%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Realm" scheme="http://www.futantan.com/tags/Realm/"/>
    
  </entry>
  
  <entry>
    <title>程序员的懒惰与面向协议编程(POP)</title>
    <link href="http://www.futantan.com/2016/03/03/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%87%92%E6%83%B0%E4%B8%8E%E9%9D%A2%E5%90%91%E5%8D%8F%E8%AE%AE%E7%BC%96%E7%A8%8B-POP/"/>
    <id>http://www.futantan.com/2016/03/03/程序员的懒惰与面向协议编程-POP/</id>
    <published>2016-03-03T12:41:33.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Laziness, impatience and hubris.<br>程序员的三大美德。今天我们来谈一谈三大美德之首，懒惰。（或许这能解释一下为什么我这么久没有更新博客…）</p><a id="more"></a><p>我仍然记得本科老师的谆谆教诲，『懒惰即美德，重复就是罪恶』。一个对代码有着严重洁癖的程序员，是不允许代码中出现大量重复的，从机器码到高级语言，可以类比于农耕时代到工业社会，优秀的代码总是职责单一而且简单明了的。函数作为代码复用的基本单元，已经被被大家广泛使用，当然可能还是会有人争论，代码量这么小的几行代码，只有两处调用，又抽成函数，会造成压栈出栈的性能消耗，当然我承认你说的都对，但是我就是不能忍受重复的代码，而且现代的编译器已经非常聪明，会将一些小的函数调用自动内联（inline）。所以，性能才是万恶之源啊。</p><p>函数作为代码复用的单位，已经不能解决广大程序员日益增长的懒惰曲线和现有的复用技术的矛盾了。Here comes OOP。面向对象编程在 Java 大行其道的今天，可能已经早已被大家接受了。编程的过程不再是简单的函数调用，而是不同对象之间的消息发送（sending messages between objects）。通过继承，子类对象可以获得父类的属性和方法，然而，这种复用的方式还是耦合性太强了，举个粗俗的例子，一个人想要获得另一个人的资源，就要认他做父，在 Java 和很多其他编程语言中，都是只支持单继承的，可以认很多的父亲（比如 C++），管理起来就很混乱。然而，人总是懒惰和贪婪的，我又想要其他人的资源，这时候该怎么办呢？找个满足你所有需求的爹…</p><p>以 iOS 为例，我想要继承自一个 ViewController1，然而，还想要有另外的一个 ViewController2，该怎么办呢，创建一个新的 ViewController3，复制粘贴 ViewController1 和 ViewController2 的代码，然后在继承自 ViewController3，然而代码又有重复了。</p><p>可以看出，继承，作为代码复用的一种方式，耦合性还是太强。那么有没有一种方法，能够在不改变现有代码的基础上，实现代码的复用呢。</p><p><a href="https://developer.apple.com/videos/play/wwdc2015/408/" target="_blank" rel="external">面向协议编程</a></p><p>其实像 Ruby 中的 Mix-in 或 Trait可以实现类似的功能，这里不展开讨论了。</p><p>当然会有人说，面向协议编程，这里的 protocol 不就是 Java 中的 interface 吗，对，也不对。Java 中的 interface，更多的功能是处理类型信息，更像是多态的效果，然而并没有提供代码的复用机制，因为拥有相同接口的不同的类，即使他们的接口实现都相同，也必须同时实现这个接口，于是，重复代码又出现了！</p><p>在 Swift 2.0 之后，我们可以使用 extension 为 protocol 添加默认的实现，也就是说，在大多数情况下，我们使用这种低耦合的方式，让你的类站出来说，我要遵循 XXX 协议，然后，就完成了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Laziness, impatience and hubris.&lt;br&gt;程序员的三大美德。今天我们来谈一谈三大美德之首，懒惰。（或许这能解释一下为什么我这么久没有更新博客…）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://www.futantan.com/tags/Swift/"/>
    
      <category term="荒唐言" scheme="http://www.futantan.com/tags/%E8%8D%92%E5%94%90%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>使用 guard 的正确姿势</title>
    <link href="http://www.futantan.com/2016/02/14/when-not-to-use-guard/"/>
    <id>http://www.futantan.com/2016/02/14/when-not-to-use-guard/</id>
    <published>2016-02-14T02:00:00.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：Radek Pietruszewski，<a href="http://radex.io/swift/guard/" target="_blank" rel="external">原文链接</a>，原文日期：2015-12-14<br>译者：<a href="http://www.futantan.com">Prayer</a>；校对：<a href="undefined">Channe</a>；定稿：<a href="http://numbbbbb.com/" target="_blank" rel="external">numbbbbb</a></p></blockquote><a id="more"></a><p><code>guard</code> 是 Swift 2 中我最喜爱的特性之一。虽然完全不使用 <code>guard</code> 也没有什么影响，它只是给我们提供了更微妙的句法表达，但是如果能够正确使用 <code>guard</code> 语句，无疑是一件令人愉快的事。它可以让我们的方法表意更加明确，更易于阅读，它能够表达『提前退出』的意图，同时提高了程序的健壮性。</p><p>因此，学习和理解如何正确使用 <code>guard</code> 表达式非常重要。<code>guard</code> 有它适用的场景，但是这并不意味着要将所有的 <code>if..else</code> 和 <code>if let</code> 语句都替换成 <code>guard</code> 语句。虽然 <code>guard</code> 语句很棒，但是很容易被滥用，并不是所有的代码结构中都适合使用 <code>guard</code> 语句。</p><p>下面是 <code>guard</code> 语句的使用原则。<br><!--more--></p><h2 id="可以用-guard：在验证入口条件时"><a href="#可以用-guard：在验证入口条件时" class="headerlink" title="可以用 guard：在验证入口条件时"></a>可以用 <code>guard</code>：在验证入口条件时</h2><p>这可能是最简单和最常用的情况。你写了一个方法来完成某个工作，但是只有在满足某些先决条件的情况下，方法才能够被继续执行。</p><p>例如：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateWatchApplicationContext</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> session = <span class="type">WCSession</span>.defaultSession()</div><div class="line">    </div><div class="line">    <span class="keyword">guard</span> session.watchAppInstalled <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">let</span> context = [<span class="string">"token"</span>: api.token]</div><div class="line">        <span class="keyword">try</span> session.updateApplicationContext(context)</div><div class="line">    &#125; <span class="keyword">catch</span> &#123;</div><div class="line">        <span class="built_in">print</span>(error)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样写有两个好处：</p><p>首先，在方法开头进行条件的检查，而不是将其包裹在整个的 <code>if</code> 语句之中。这样一眼就能看出，这个条件检查并不是函数本身的功用，而是函数执行的先决条件。</p><p>其次，使用 <code>guard</code> 语句时，读者和编译器就会知道如果条件为 <code>false</code>，方法将会直接 <code>return</code>。虽然这只是对编译器检查的一个细微的说明，但是从长远来看，代码的可维护性得到了加强——如果有人不小心将提前退出的语句从 <code>else</code> 表达式中移除了，编译器会及时告诉你这个错误。</p><h2 id="可以用-guard：在成功路径上提前退出"><a href="#可以用-guard：在成功路径上提前退出" class="headerlink" title="可以用 guard：在成功路径上提前退出"></a>可以用 <code>guard</code>：在成功路径上提前退出</h2><p>使用场景：方法中存在非常长的执行路径，在最终结果得到之前，中间会有多个需要被满足的条件，这些条件都应该为真，否则应该直接 <code>return</code> 或者抛出异常。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">vendAllNamed</span><span class="params">(itemName: String)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">    <span class="keyword">guard</span> isEnabled <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="type">VendingMachineError</span>.<span class="type">Disabled</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> items = getItemsNamed(itemName)</div><div class="line">    </div><div class="line">    <span class="keyword">guard</span> items.<span class="built_in">count</span> &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="type">VendingMachineError</span>.<span class="type">OutOfStock</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> totalPrice = items.<span class="built_in">reduce</span>(<span class="number">0</span>, combine: +)</div><div class="line">    </div><div class="line">    <span class="keyword">guard</span> coinsDeposited &gt;= totalPrice <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="type">VendingMachineError</span>.<span class="type">InsufficientFunds</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    coinsDeposited -= totalPrice</div><div class="line">    removeFromInventory(itemName)</div><div class="line">    dispenseSnacks(items)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="可以用-guard：在可选值解包时（拍扁-if-let-else-金字塔）"><a href="#可以用-guard：在可选值解包时（拍扁-if-let-else-金字塔）" class="headerlink" title="可以用 guard：在可选值解包时（拍扁 if let..else 金字塔）"></a>可以用 <code>guard</code>：在可选值解包时（拍扁 <code>if let..else</code> 金字塔）</h2><p>可能的场景：需要确保执行的先决条件，或者需要在很长的执行路径中，确保某些检查点的条件能够满足。但是和一些返回 <code>boolean</code> 类型的普通检查不同，你想要确保某些可选值非空且需要将它解包。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">taskFromJSONResponse</span><span class="params">(jsonData: NSData)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Task</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> json = decodeJSON(jsonData) <span class="keyword">as</span>? [<span class="type">String</span>: <span class="type">AnyObject</span>] <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="type">ParsingError</span>.<span class="type">InvalidJSON</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> id = json[<span class="string">"id"</span>] <span class="keyword">as</span>? <span class="type">Int</span>,</div><div class="line">          <span class="keyword">let</span> name = json[<span class="string">"name"</span>] <span class="keyword">as</span>? <span class="type">String</span>,</div><div class="line">          <span class="keyword">let</span> userId = json[<span class="string">"user_id"</span>] <span class="keyword">as</span>? <span class="type">Int</span>,</div><div class="line">          <span class="keyword">let</span> position = json[<span class="string">"pos"</span>] <span class="keyword">as</span>? <span class="type">Double</span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="type">ParsingError</span>.<span class="type">MissingData</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="type">Task</span>(id: id, name: name, userId: userId, position: position)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>进阶 Tip：</strong>在 Swift 中更好的处理 JSON 方式可以<a href="https://github.com/LoganWright/Genome" target="_blank" rel="external">参考这里</a></p><p>使用 <code>guard</code> 的方式来解包可选值是非常推荐的。<code>if let</code> 的方式需要在大括号内使用解包之后的值，而 <code>guard</code> 语句将解包之后的值添加到了之后的作用域之中——所以你可以在使用 <code>guard</code> 解包之后直接使用它，不用包裹在大括号内。</p><p>我们更推荐使用 <code>guard</code> 的方式，因为如果你有多个需要解包的可选值，使用 <code>guard</code> 的方式可以避免金字塔灾难（多个层级的 <code>if let</code> 嵌套）</p><p>对我们的大脑来说，在简单的情况下，理解一个扁平的代码路径相比于理解分析嵌套的分支结构更为容易。</p><h2 id="可以用-guard：return-和-throw-中"><a href="#可以用-guard：return-和-throw-中" class="headerlink" title="可以用 guard：return 和 throw 中"></a>可以用 <code>guard</code>：<code>return</code> 和 <code>throw</code> 中</h2><p>提前退出，作为一种通用的适用规则，表示是以下三种情形之一：</p><p><strong>执行被终止</strong></p><p>当方法没有返回值，方法仅执行一个命令，但是该命令无法被完成时。</p><p>例子：一个用来更新 WatchKit 应用程序上下文的方法，但是这个应用没有被部署到 Apple Watch 上去。</p><p>推荐做法：直接返回</p><p><strong>计算的结果为空值</strong></p><p>方法会返回某些值，例如将输入的参数做某些转化，而转化没有被正确的执行。</p><p>例子：方法将反序列化缓存，返回一个对象数组，但是磁盘中的相应缓存不存在。</p><p>推荐的做法：</p><ul><li><code>return nil</code></li><li><code>return []</code>, <code>return &quot;&quot;</code> — 返回标准库容器的空值</li><li><code>return Account.guestAccount()</code> — 返回相应对象中，表示为默认或者为空的状态的值</li></ul><p><strong>执行出现错误</strong></p><p>方法有可能因为多种原因执行失败，而同时想告知方法的调用者，这些失败的原因。</p><p>例子：方法从磁盘上读取文件内容，或者进行网络请求并解析获得的数据</p><p>推荐的做法：</p><ul><li><code>throw FileError.NotFound</code></li><li><code>return Result.Failure(.NotFound)</code> — 如果你要使用指定类型的返回值</li><li><code>onFailure(.NotFound); return</code> — 适用于异步调用</li><li><code>return Promise(error: FileError.NotFound)</code> — 在异步调用中使用 Promises 的情况</li></ul><h2 id="可以用-guard：日志、崩溃和断言中"><a href="#可以用-guard：日志、崩溃和断言中" class="headerlink" title="可以用 guard：日志、崩溃和断言中"></a>可以用 <code>guard</code>：日志、崩溃和断言中</h2><p><strong>日志</strong></p><p>有时候，在方法返回之前有必要将日志信息输出到控制台，至少在开发阶段这种方式非常有用。即使在我们的代码能够很好地处理错误情况下，也能够帮助我们跟踪错误信息。然而，在 <code>guard</code> 的 <code>else</code> 语句中包含太多的处理代码是不太合适的。</p><p><strong>致命状态（Fatal conditions）</strong></p><p>程序的执行的条件不能够被满足，如果这是个非常严重的程序错误，那么故意让这种状况 crash 掉，这种处理方式将非常有意义。如果你的应用无论哪种方式都会 crash 掉，又或者程序最终会处于一种非法的状态的话，这种情形最好自己去处理。通过 <code>guard</code> 的方式，你可以确保程序在可知的情况下退出，在 crash 的时候能够显示相应的原因。</p><p>这种的使用场景通常是<strong>precondition</strong>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">precondition</span>(internet.kittenCount == <span class="type">Int</span>.<span class="built_in">max</span>, <span class="string">"Not enough kittens in the internet"</span>)</div></pre></td></tr></table></figure><p>然而，如果判断的条件不仅是简单的布尔表达式而涉及到可选值的解包，可以使用 <code>guard</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> kittens = internet.kittens <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">fatalError</span>(<span class="string">"OMG ran out of kittens!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>断言</strong></p><p>有时候，总是期望在某种条件能够被满足，然而即使条件不满足也不是什么大不了的程序错误。在这种情况下，可以考虑像下面这样使用 <code>assertionFailure</code>：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> puppies = internet.puppies <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">assertionFailure</span>(<span class="string">"Huh, no dogs"</span>)</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过这种 crash 的方式，可以在开发和内测期间很容易的找到 bug 位置，但是在正式发布的时候，应用不会 crash 掉（虽然可能 bug 满天飞）。</p><p>在提醒一次，如果判断的条件仅仅是个布尔类型，使用 <code>assert(condition)</code> 就可以胜任。</p><h2 id="不要用-guard：替代琐碎的-if-else-语句"><a href="#不要用-guard：替代琐碎的-if-else-语句" class="headerlink" title="不要用 guard：替代琐碎的 if..else 语句"></a>不要用 <code>guard</code>：替代琐碎的 <code>if..else</code> 语句</h2><p>如果有一个简单的方法，只包含一个简单的 if..else 语句，不要使用 guard：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Don't:</span></div><div class="line"><span class="keyword">var</span> projectName: <span class="type">String</span>? &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> project = task.project <span class="keyword">where</span> project.isValid <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> project.name</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对这种简单的情况而言，使用两个分支的 <code>if..else</code> 语句比起没有分支的 <code>guard</code> 更加容易理解。虽然可能在其他的情形中使用 <code>guard</code> 也是一个很好的候选项。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Better!</span></div><div class="line"><span class="keyword">var</span> projectName: <span class="type">String</span>? &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> project = task.project <span class="keyword">where</span> project.isValid &#123;</div><div class="line">        <span class="keyword">return</span> project.name</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>进阶 Tip：</strong>请确保自己理解了<a href="https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-ID245" target="_blank" rel="external">可选链</a>：<code>Optional.map</code> 和 <code>Optional.flatMap</code>；通过使用这些工具，通常可以避免使用显式的 <code>if let</code> 来解包。</p><h2 id="不要用-guard：作为-if-的相反情况"><a href="#不要用-guard：作为-if-的相反情况" class="headerlink" title="不要用 guard：作为 if 的相反情况"></a>不要用 <code>guard</code>：作为 <code>if</code> 的相反情况</h2><p>在一些语言中，例如 Ruby，有 <code>unless</code> 语句，本质上是 <code>if</code> 的相反情况（reverse if）——作用域内的代码只有在传递进来的条件被判断为 <code>false</code> 的时候执行。</p><p>Swift 中的 <code>guard</code>，虽然有一些类似，但是它们是不同的东西。<code>guard</code> 不是通常意义上的分支语义。它特别强调，在某些期望的条件不满足时，提前退出。</p><p>虽然在一些情况下，你可以将 <code>guard</code> 强行掰弯，当做 reverse if 来使用，但是，亲不要啊！使用 <code>if..else</code> 语句或者考虑将代码分割成多个函数。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Don't:</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> s = sequence <span class="keyword">as</span>? <span class="type">Set</span>&lt;<span class="type">Element</span>&gt; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> sequence &#123;</div><div class="line">        insert(item)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">switch</span> (s._variantStorage) &#123;</div><div class="line"><span class="keyword">case</span> .<span class="type">Native</span>(<span class="keyword">let</span> owner):</div><div class="line">    _variantStorage = .<span class="type">Native</span>(owner)</div><div class="line"><span class="keyword">case</span> .<span class="type">Cocoa</span>(<span class="keyword">let</span> owner):</div><div class="line">    _variantStorage = .<span class="type">Cocoa</span>(owner)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="不要：在-guard-的-else-语句中放入复杂代码"><a href="#不要：在-guard-的-else-语句中放入复杂代码" class="headerlink" title="不要：在 guard 的 else 语句中放入复杂代码"></a>不要：在 <code>guard</code> 的 <code>else</code> 语句中放入复杂代码</h2><p>这是上面这些原则的推论：</p><p><code>guard</code> 的 <code>else</code> 语句中，除了一个简单的提前退出语句外，不应该有其他的代码逻辑。加入一些诊断日志的代码是可以的，但是其他的代码逻辑不应该有。当然也可以在 <code>else</code> 中加入一些对未完成工作的清理或者打开资源的释放，虽然大部分情况下，你应该使用 <code>defer</code> 来完成这些清理工作。</p><p>总之，如果你在 <code>else</code> 块做了任何实际功能，除了那些离开当前方法的必要操作，你就误用了 <code>guard</code>。</p><p><strong>经验之谈: </strong><code>guard</code> 的 <code>else</code> 代码块不要多于 2-3 行代码。</p><blockquote><p>本文由 SwiftGG 翻译组翻译，已经获得作者翻译授权，最新文章请访问 <a href="http://swift.gg" target="_blank" rel="external">http://swift.gg</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者：Radek Pietruszewski，&lt;a href=&quot;http://radex.io/swift/guard/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;，原文日期：2015-12-14&lt;br&gt;译者：&lt;a href=&quot;http://www.futantan.com&quot;&gt;Prayer&lt;/a&gt;；校对：&lt;a href=&quot;undefined&quot;&gt;Channe&lt;/a&gt;；定稿：&lt;a href=&quot;http://numbbbbb.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;numbbbbb&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="译文" scheme="http://www.futantan.com/categories/%E8%AF%91%E6%96%87/"/>
    
    
      <category term="Swift" scheme="http://www.futantan.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>使用PyQt快速开发GUI应用</title>
    <link href="http://www.futantan.com/2015/11/22/use-pyqt-develop-gui/"/>
    <id>http://www.futantan.com/2015/11/22/use-pyqt-develop-gui/</id>
    <published>2015-11-22T07:43:40.000Z</published>
    <updated>2017-10-27T09:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客主要目的是备忘 =.= </p><a id="more"></a><p>上学期才用 PyQt 写过 Linux 的桌面应用，这学期实验室又有个需求，在 Win 上来写个演示的界面。这个任务一开始我是拒绝的，对于一个强烈反感在 Windows 环境下开发的人来说…和老师四目相对了几秒钟，“好的！”。</p><p>然而 PyQt 的开发姿势我居然忘记了…年纪大了果然记性不太好，滚回来写篇博客记录一下，方便以后还有类似搬砖的活儿。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>一开始肯定是搞定各种环境，不像 Linux 的命令行那样友好，安装包要自己一个个下。</p><ul><li><a href="https://www.python.org/" target="_blank" rel="external">python 包地址</a></li><li><a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">pip 地址</a></li><li><a href="https://www.riverbankcomputing.com/software/pyqt/download" target="_blank" rel="external">PyQt 地址</a></li></ul><p>分别选择合适的包安装就可以了，然后配置好 python 和 pip 的环境变量。</p><h2 id="装成设计师的样子"><a href="#装成设计师的样子" class="headerlink" title="装成设计师的样子"></a>装成设计师的样子</h2><p><img src="/media/QQ%E6%88%AA%E5%9B%BE20151122155526.png" alt="QQ截图20151122155526"></p><p>恩…开发环境还是 xp 的！</p><p>随便拖拽一些控件，摆个积木什么的，注意选中 <code>发送</code> 按钮，将它的 <code>objectName</code> 改为 <code>sendButton</code>，或者其他你喜欢的名字，后面会用到。</p><h2 id="与-UI-交互"><a href="#与-UI-交互" class="headerlink" title="与 UI 交互"></a>与 UI 交互</h2><p>有 UI 的程序，界面最重要的作用是替代命令行在某个时刻发送一些命令，为了将 UI 导入我们的程序，需要做一些操作。</p><p>首先保存这个 UI 文件，不妨就叫做 <code>a.ui</code>。打开命令行工具，进入该文件的目录，利用 ui 文件生成 python 代码。这里如果用编辑器查看 ui 文件，其实就是个 xml，和 Android 与 iOS 的界面原理一致，使用如下代码，生成 UI 代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyuic4 a.ui -o ui.py</div></pre></td></tr></table></figure><p>选取喜爱的编辑器打开代码目录，新建一个 python 文件，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt4 <span class="keyword">import</span> QtCore, QtGui</div><div class="line"></div><div class="line"><span class="keyword">from</span> ui <span class="keyword">import</span> Ui_MainWindow <span class="comment"># 1</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span><span class="params">(QtGui.QMainWindow)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, parent=None)</span>:</span></div><div class="line">        QtGui.QWidget.__init__(self, parent)</div><div class="line">        self.ui = Ui_MainWindow()</div><div class="line">        self.ui.setupUi(self)</div><div class="line">        self.ui.sendButton.clicked.connect(self.sendButtonClicked) <span class="comment"># 2</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendButtonClicked</span><span class="params">(self)</span>:</span> <span class="comment"># 3</span></div><div class="line">    <span class="keyword">print</span> <span class="number">123</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    app = QtGui.QApplication(sys.argv)</div><div class="line">    myapp = MyApp()</div><div class="line">    myapp.show()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure><p>其他部分都是固定不变的。</p><ol><li>注释 1 处： <code>ui</code> 是生成的 <code>ui.py</code> 文件</li><li>注释 2 处： 将 <code>sendButton</code> 按钮和 <code>sendButtonClicked</code> 绑定</li><li>注释 3 出： 具体实现</li></ol><p>了解了这些，基本就够用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客主要目的是备忘 =.= &lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://www.futantan.com/tags/python/"/>
    
      <category term="GUI" scheme="http://www.futantan.com/tags/GUI/"/>
    
  </entry>
  
</feed>
